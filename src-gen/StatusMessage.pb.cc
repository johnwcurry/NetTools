// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusMessage.proto

#include "StatusMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StatusMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StatusMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoxDate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StatusMessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PortStatus;
}  // namespace protobuf_StatusMessage_2eproto
class BoxDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoxDate>
      _instance;
} _BoxDate_default_instance_;
class PortStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PortStatus>
      _instance;
} _PortStatus_default_instance_;
class StatusInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusInfo>
      _instance;
} _StatusInfo_default_instance_;
namespace protobuf_StatusMessage_2eproto {
static void InitDefaultsBoxDate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BoxDate_default_instance_;
    new (ptr) ::BoxDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BoxDate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BoxDate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBoxDate}, {}};

static void InitDefaultsPortStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PortStatus_default_instance_;
    new (ptr) ::PortStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PortStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PortStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPortStatus}, {
      &protobuf_StatusMessage_2eproto::scc_info_BoxDate.base,}};

static void InitDefaultsStatusInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatusInfo_default_instance_;
    new (ptr) ::StatusInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatusInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StatusInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStatusInfo}, {
      &protobuf_StatusMessage_2eproto::scc_info_BoxDate.base,
      &protobuf_StatusMessage_2eproto::scc_info_PortStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BoxDate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PortStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatusInfo.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BoxDate, newtimepresent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, crcerr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, badpkt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, uuiderr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, unknownerr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, unknownmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PortStatus, lasterrtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, secwalluuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, secwallname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newsecwallnamepresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, ipaddrrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newiprxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, netmaskrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newrxmaskpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, portrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newportrxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, gatewayrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newgatewayrxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, ipaddrtx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newiptxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, netmasktx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newtxmaskpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, porttx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newporttxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, gatewaytx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, newgatewaytxpresent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, currentdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, mcaststatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, multicastlistenaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, multicastlistenport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, tcplistenportrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StatusInfo, tcpsendporttx_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BoxDate)},
  { 12, -1, sizeof(::PortStatus)},
  { 25, -1, sizeof(::StatusInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BoxDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PortStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StatusInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StatusMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023StatusMessage.proto\"y\n\007BoxDate\022\014\n\004Year"
      "\030\001 \001(\005\022\r\n\005Month\030\002 \001(\005\022\013\n\003Day\030\003 \001(\005\022\014\n\004Ho"
      "ur\030\004 \001(\005\022\016\n\006Minute\030\005 \001(\005\022\016\n\006Second\030\006 \001(\005"
      "\022\026\n\016NewTimePresent\030\007 \001(\010\"\244\001\n\nPortStatus\022"
      "\014\n\004Sent\030\001 \001(\005\022\020\n\010Received\030\002 \001(\005\022\016\n\006CrcEr"
      "r\030\003 \001(\005\022\016\n\006BadPkt\030\004 \001(\005\022\017\n\007UuidErr\030\005 \001(\005"
      "\022\022\n\nUnknownErr\030\006 \001(\005\022\022\n\nUnknownMsg\030\007 \001(\005"
      "\022\035\n\013LastErrTime\030\010 \001(\0132\010.BoxDate\"\342\004\n\nStat"
      "usInfo\022\023\n\013SecWallUuid\030\001 \001(\t\022\023\n\013SecWallNa"
      "me\030\002 \001(\t\022\035\n\025NewSecWallNamePresent\030\003 \001(\010\022"
      "\020\n\010IpAddrRx\030\004 \001(\t\022\026\n\016NewIpRxPresent\030\005 \001("
      "\010\022\021\n\tNetMaskRx\030\006 \001(\t\022\030\n\020NewRxMaskPresent"
      "\030\007 \001(\010\022\016\n\006PortRx\030\010 \001(\005\022\030\n\020NewPortRxPrese"
      "nt\030\t \001(\010\022\021\n\tGatewayRx\030\n \001(\t\022\033\n\023NewGatewa"
      "yRxPresent\030\013 \001(\010\022\020\n\010IpAddrTx\030\014 \001(\t\022\026\n\016Ne"
      "wIpTxPresent\030\r \001(\010\022\021\n\tNetMaskTx\030\016 \001(\t\022\030\n"
      "\020NewTxMaskPresent\030\017 \001(\010\022\016\n\006PortTx\030\020 \001(\005\022"
      "\030\n\020NewPortTxPresent\030\021 \001(\010\022\021\n\tGatewayTx\030\022"
      " \001(\t\022\033\n\023NewGatewayTxPresent\030\023 \001(\010\022\035\n\013Cur"
      "rentDate\030\024 \001(\0132\010.BoxDate\022 \n\013McastStatus\030"
      "\025 \001(\0132\013.PortStatus\022\033\n\023MulticastListenAdd"
      "r\030\026 \001(\t\022\033\n\023MulticastListenPort\030\027 \001(\005\022\027\n\017"
      "TcpListenPortRx\030\030 \001(\005\022\025\n\rTcpSendPortTx\030\031"
      " \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatusMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StatusMessage_2eproto

// ===================================================================

void BoxDate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxDate::kYearFieldNumber;
const int BoxDate::kMonthFieldNumber;
const int BoxDate::kDayFieldNumber;
const int BoxDate::kHourFieldNumber;
const int BoxDate::kMinuteFieldNumber;
const int BoxDate::kSecondFieldNumber;
const int BoxDate::kNewTimePresentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxDate::BoxDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StatusMessage_2eproto::scc_info_BoxDate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoxDate)
}
BoxDate::BoxDate(const BoxDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&newtimepresent_) -
    reinterpret_cast<char*>(&year_)) + sizeof(newtimepresent_));
  // @@protoc_insertion_point(copy_constructor:BoxDate)
}

void BoxDate::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newtimepresent_) -
      reinterpret_cast<char*>(&year_)) + sizeof(newtimepresent_));
}

BoxDate::~BoxDate() {
  // @@protoc_insertion_point(destructor:BoxDate)
  SharedDtor();
}

void BoxDate::SharedDtor() {
}

void BoxDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BoxDate::descriptor() {
  ::protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoxDate& BoxDate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StatusMessage_2eproto::scc_info_BoxDate.base);
  return *internal_default_instance();
}


void BoxDate::Clear() {
// @@protoc_insertion_point(message_clear_start:BoxDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newtimepresent_) -
      reinterpret_cast<char*>(&year_)) + sizeof(newtimepresent_));
  _internal_metadata_.Clear();
}

bool BoxDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoxDate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Minute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Second = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewTimePresent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newtimepresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoxDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoxDate)
  return false;
#undef DO_
}

void BoxDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoxDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // int32 Month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // int32 Day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // int32 Hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // int32 Minute = 5;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minute(), output);
  }

  // int32 Second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  // bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newtimepresent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BoxDate)
}

::google::protobuf::uint8* BoxDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BoxDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // int32 Month = 2;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // int32 Day = 3;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // int32 Hour = 4;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // int32 Minute = 5;
  if (this->minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minute(), target);
  }

  // int32 Second = 6;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  // bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newtimepresent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoxDate)
  return target;
}

size_t BoxDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoxDate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // int32 Month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // int32 Day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // int32 Hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  // int32 Minute = 5;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minute());
  }

  // int32 Second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second());
  }

  // bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoxDate)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoxDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoxDate)
    MergeFrom(*source);
  }
}

void BoxDate::MergeFrom(const BoxDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoxDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
  if (from.newtimepresent() != 0) {
    set_newtimepresent(from.newtimepresent());
  }
}

void BoxDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoxDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDate::CopyFrom(const BoxDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoxDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDate::IsInitialized() const {
  return true;
}

void BoxDate::Swap(BoxDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxDate::InternalSwap(BoxDate* other) {
  using std::swap;
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_, other->second_);
  swap(newtimepresent_, other->newtimepresent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BoxDate::GetMetadata() const {
  protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PortStatus::InitAsDefaultInstance() {
  ::_PortStatus_default_instance_._instance.get_mutable()->lasterrtime_ = const_cast< ::BoxDate*>(
      ::BoxDate::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortStatus::kSentFieldNumber;
const int PortStatus::kReceivedFieldNumber;
const int PortStatus::kCrcErrFieldNumber;
const int PortStatus::kBadPktFieldNumber;
const int PortStatus::kUuidErrFieldNumber;
const int PortStatus::kUnknownErrFieldNumber;
const int PortStatus::kUnknownMsgFieldNumber;
const int PortStatus::kLastErrTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortStatus::PortStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StatusMessage_2eproto::scc_info_PortStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PortStatus)
}
PortStatus::PortStatus(const PortStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lasterrtime()) {
    lasterrtime_ = new ::BoxDate(*from.lasterrtime_);
  } else {
    lasterrtime_ = NULL;
  }
  ::memcpy(&sent_, &from.sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknownmsg_) -
    reinterpret_cast<char*>(&sent_)) + sizeof(unknownmsg_));
  // @@protoc_insertion_point(copy_constructor:PortStatus)
}

void PortStatus::SharedCtor() {
  ::memset(&lasterrtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknownmsg_) -
      reinterpret_cast<char*>(&lasterrtime_)) + sizeof(unknownmsg_));
}

PortStatus::~PortStatus() {
  // @@protoc_insertion_point(destructor:PortStatus)
  SharedDtor();
}

void PortStatus::SharedDtor() {
  if (this != internal_default_instance()) delete lasterrtime_;
}

void PortStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PortStatus::descriptor() {
  ::protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PortStatus& PortStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StatusMessage_2eproto::scc_info_PortStatus.base);
  return *internal_default_instance();
}


void PortStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PortStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lasterrtime_ != NULL) {
    delete lasterrtime_;
  }
  lasterrtime_ = NULL;
  ::memset(&sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknownmsg_) -
      reinterpret_cast<char*>(&sent_)) + sizeof(unknownmsg_));
  _internal_metadata_.Clear();
}

bool PortStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PortStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Sent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Received = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CrcErr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crcerr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BadPkt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badpkt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UuidErr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuiderr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UnknownErr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknownerr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UnknownMsg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknownmsg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BoxDate LastErrTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lasterrtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PortStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PortStatus)
  return false;
#undef DO_
}

void PortStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PortStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Sent = 1;
  if (this->sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sent(), output);
  }

  // int32 Received = 2;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->received(), output);
  }

  // int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->crcerr(), output);
  }

  // int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->badpkt(), output);
  }

  // int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uuiderr(), output);
  }

  // int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unknownerr(), output);
  }

  // int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unknownmsg(), output);
  }

  // .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_lasterrtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PortStatus)
}

::google::protobuf::uint8* PortStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PortStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Sent = 1;
  if (this->sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sent(), target);
  }

  // int32 Received = 2;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->received(), target);
  }

  // int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->crcerr(), target);
  }

  // int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->badpkt(), target);
  }

  // int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uuiderr(), target);
  }

  // int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unknownerr(), target);
  }

  // int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unknownmsg(), target);
  }

  // .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_lasterrtime(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PortStatus)
  return target;
}

size_t PortStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PortStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lasterrtime_);
  }

  // int32 Sent = 1;
  if (this->sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sent());
  }

  // int32 Received = 2;
  if (this->received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->received());
  }

  // int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crcerr());
  }

  // int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->badpkt());
  }

  // int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uuiderr());
  }

  // int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unknownerr());
  }

  // int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unknownmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PortStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PortStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PortStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PortStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PortStatus)
    MergeFrom(*source);
  }
}

void PortStatus::MergeFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PortStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lasterrtime()) {
    mutable_lasterrtime()->::BoxDate::MergeFrom(from.lasterrtime());
  }
  if (from.sent() != 0) {
    set_sent(from.sent());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.crcerr() != 0) {
    set_crcerr(from.crcerr());
  }
  if (from.badpkt() != 0) {
    set_badpkt(from.badpkt());
  }
  if (from.uuiderr() != 0) {
    set_uuiderr(from.uuiderr());
  }
  if (from.unknownerr() != 0) {
    set_unknownerr(from.unknownerr());
  }
  if (from.unknownmsg() != 0) {
    set_unknownmsg(from.unknownmsg());
  }
}

void PortStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortStatus::CopyFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortStatus::IsInitialized() const {
  return true;
}

void PortStatus::Swap(PortStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortStatus::InternalSwap(PortStatus* other) {
  using std::swap;
  swap(lasterrtime_, other->lasterrtime_);
  swap(sent_, other->sent_);
  swap(received_, other->received_);
  swap(crcerr_, other->crcerr_);
  swap(badpkt_, other->badpkt_);
  swap(uuiderr_, other->uuiderr_);
  swap(unknownerr_, other->unknownerr_);
  swap(unknownmsg_, other->unknownmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PortStatus::GetMetadata() const {
  protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatusInfo::InitAsDefaultInstance() {
  ::_StatusInfo_default_instance_._instance.get_mutable()->currentdate_ = const_cast< ::BoxDate*>(
      ::BoxDate::internal_default_instance());
  ::_StatusInfo_default_instance_._instance.get_mutable()->mcaststatus_ = const_cast< ::PortStatus*>(
      ::PortStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusInfo::kSecWallUuidFieldNumber;
const int StatusInfo::kSecWallNameFieldNumber;
const int StatusInfo::kNewSecWallNamePresentFieldNumber;
const int StatusInfo::kIpAddrRxFieldNumber;
const int StatusInfo::kNewIpRxPresentFieldNumber;
const int StatusInfo::kNetMaskRxFieldNumber;
const int StatusInfo::kNewRxMaskPresentFieldNumber;
const int StatusInfo::kPortRxFieldNumber;
const int StatusInfo::kNewPortRxPresentFieldNumber;
const int StatusInfo::kGatewayRxFieldNumber;
const int StatusInfo::kNewGatewayRxPresentFieldNumber;
const int StatusInfo::kIpAddrTxFieldNumber;
const int StatusInfo::kNewIpTxPresentFieldNumber;
const int StatusInfo::kNetMaskTxFieldNumber;
const int StatusInfo::kNewTxMaskPresentFieldNumber;
const int StatusInfo::kPortTxFieldNumber;
const int StatusInfo::kNewPortTxPresentFieldNumber;
const int StatusInfo::kGatewayTxFieldNumber;
const int StatusInfo::kNewGatewayTxPresentFieldNumber;
const int StatusInfo::kCurrentDateFieldNumber;
const int StatusInfo::kMcastStatusFieldNumber;
const int StatusInfo::kMulticastListenAddrFieldNumber;
const int StatusInfo::kMulticastListenPortFieldNumber;
const int StatusInfo::kTcpListenPortRxFieldNumber;
const int StatusInfo::kTcpSendPortTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusInfo::StatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StatusMessage_2eproto::scc_info_StatusInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatusInfo)
}
StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secwalluuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secwalluuid().size() > 0) {
    secwalluuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwalluuid_);
  }
  secwallname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secwallname().size() > 0) {
    secwallname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwallname_);
  }
  ipaddrrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddrrx().size() > 0) {
    ipaddrrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrrx_);
  }
  netmaskrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.netmaskrx().size() > 0) {
    netmaskrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmaskrx_);
  }
  gatewayrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewayrx().size() > 0) {
    gatewayrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayrx_);
  }
  ipaddrtx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddrtx().size() > 0) {
    ipaddrtx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrtx_);
  }
  netmasktx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.netmasktx().size() > 0) {
    netmasktx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmasktx_);
  }
  gatewaytx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewaytx().size() > 0) {
    gatewaytx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaytx_);
  }
  multicastlistenaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.multicastlistenaddr().size() > 0) {
    multicastlistenaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multicastlistenaddr_);
  }
  if (from.has_currentdate()) {
    currentdate_ = new ::BoxDate(*from.currentdate_);
  } else {
    currentdate_ = NULL;
  }
  if (from.has_mcaststatus()) {
    mcaststatus_ = new ::PortStatus(*from.mcaststatus_);
  } else {
    mcaststatus_ = NULL;
  }
  ::memcpy(&newsecwallnamepresent_, &from.newsecwallnamepresent_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcpsendporttx_) -
    reinterpret_cast<char*>(&newsecwallnamepresent_)) + sizeof(tcpsendporttx_));
  // @@protoc_insertion_point(copy_constructor:StatusInfo)
}

void StatusInfo::SharedCtor() {
  secwalluuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewaytx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastlistenaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&currentdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpsendporttx_) -
      reinterpret_cast<char*>(&currentdate_)) + sizeof(tcpsendporttx_));
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:StatusInfo)
  SharedDtor();
}

void StatusInfo::SharedDtor() {
  secwalluuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewaytx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastlistenaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete currentdate_;
  if (this != internal_default_instance()) delete mcaststatus_;
}

void StatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  ::protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusInfo& StatusInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StatusMessage_2eproto::scc_info_StatusInfo.base);
  return *internal_default_instance();
}


void StatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secwalluuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewaytx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastlistenaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && currentdate_ != NULL) {
    delete currentdate_;
  }
  currentdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcaststatus_ != NULL) {
    delete mcaststatus_;
  }
  mcaststatus_ = NULL;
  ::memset(&newsecwallnamepresent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpsendporttx_) -
      reinterpret_cast<char*>(&newsecwallnamepresent_)) + sizeof(tcpsendporttx_));
  _internal_metadata_.Clear();
}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StatusInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string SecWallUuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secwalluuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secwalluuid().data(), static_cast<int>(this->secwalluuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.SecWallUuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecWallName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secwallname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secwallname().data(), static_cast<int>(this->secwallname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.SecWallName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewSecWallNamePresent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newsecwallnamepresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string IpAddrRx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddrrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddrrx().data(), static_cast<int>(this->ipaddrrx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.IpAddrRx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewIpRxPresent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newiprxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string NetMaskRx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmaskrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmaskrx().data(), static_cast<int>(this->netmaskrx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.NetMaskRx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewRxMaskPresent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newrxmaskpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PortRx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewPortRxPresent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newportrxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GatewayRx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayrx().data(), static_cast<int>(this->gatewayrx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.GatewayRx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewGatewayRxPresent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newgatewayrxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string IpAddrTx = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddrtx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddrtx().data(), static_cast<int>(this->ipaddrtx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.IpAddrTx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewIpTxPresent = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newiptxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string NetMaskTx = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmasktx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmasktx().data(), static_cast<int>(this->netmasktx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.NetMaskTx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewTxMaskPresent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newtxmaskpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PortTx = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &porttx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewPortTxPresent = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newporttxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GatewayTx = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewaytx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewaytx().data(), static_cast<int>(this->gatewaytx().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.GatewayTx"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NewGatewayTxPresent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newgatewaytxpresent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BoxDate CurrentDate = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_currentdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PortStatus McastStatus = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcaststatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MulticastListenAddr = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multicastlistenaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multicastlistenaddr().data(), static_cast<int>(this->multicastlistenaddr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.MulticastListenAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MulticastListenPort = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multicastlistenport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TcpListenPortRx = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcplistenportrx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TcpSendPortTx = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpsendporttx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatusInfo)
  return false;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwalluuid().data(), static_cast<int>(this->secwalluuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallUuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->secwalluuid(), output);
  }

  // string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwallname().data(), static_cast<int>(this->secwallname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secwallname(), output);
  }

  // bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->newsecwallnamepresent(), output);
  }

  // string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrrx().data(), static_cast<int>(this->ipaddrrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ipaddrrx(), output);
  }

  // bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->newiprxpresent(), output);
  }

  // string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmaskrx().data(), static_cast<int>(this->netmaskrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->netmaskrx(), output);
  }

  // bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newrxmaskpresent(), output);
  }

  // int32 PortRx = 8;
  if (this->portrx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->portrx(), output);
  }

  // bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->newportrxpresent(), output);
  }

  // string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayrx().data(), static_cast<int>(this->gatewayrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gatewayrx(), output);
  }

  // bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->newgatewayrxpresent(), output);
  }

  // string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrtx().data(), static_cast<int>(this->ipaddrtx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ipaddrtx(), output);
  }

  // bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->newiptxpresent(), output);
  }

  // string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmasktx().data(), static_cast<int>(this->netmasktx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->netmasktx(), output);
  }

  // bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->newtxmaskpresent(), output);
  }

  // int32 PortTx = 16;
  if (this->porttx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->porttx(), output);
  }

  // bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->newporttxpresent(), output);
  }

  // string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaytx().data(), static_cast<int>(this->gatewaytx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->gatewaytx(), output);
  }

  // bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->newgatewaytxpresent(), output);
  }

  // .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_currentdate(), output);
  }

  // .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_mcaststatus(), output);
  }

  // string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multicastlistenaddr().data(), static_cast<int>(this->multicastlistenaddr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.MulticastListenAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->multicastlistenaddr(), output);
  }

  // int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->multicastlistenport(), output);
  }

  // int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tcplistenportrx(), output);
  }

  // int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tcpsendporttx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:StatusInfo)
}

::google::protobuf::uint8* StatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwalluuid().data(), static_cast<int>(this->secwalluuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallUuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secwalluuid(), target);
  }

  // string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwallname().data(), static_cast<int>(this->secwallname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secwallname(), target);
  }

  // bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->newsecwallnamepresent(), target);
  }

  // string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrrx().data(), static_cast<int>(this->ipaddrrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ipaddrrx(), target);
  }

  // bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->newiprxpresent(), target);
  }

  // string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmaskrx().data(), static_cast<int>(this->netmaskrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->netmaskrx(), target);
  }

  // bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newrxmaskpresent(), target);
  }

  // int32 PortRx = 8;
  if (this->portrx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->portrx(), target);
  }

  // bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->newportrxpresent(), target);
  }

  // string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayrx().data(), static_cast<int>(this->gatewayrx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gatewayrx(), target);
  }

  // bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->newgatewayrxpresent(), target);
  }

  // string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrtx().data(), static_cast<int>(this->ipaddrtx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ipaddrtx(), target);
  }

  // bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->newiptxpresent(), target);
  }

  // string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmasktx().data(), static_cast<int>(this->netmasktx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->netmasktx(), target);
  }

  // bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->newtxmaskpresent(), target);
  }

  // int32 PortTx = 16;
  if (this->porttx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->porttx(), target);
  }

  // bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->newporttxpresent(), target);
  }

  // string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaytx().data(), static_cast<int>(this->gatewaytx().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gatewaytx(), target);
  }

  // bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->newgatewaytxpresent(), target);
  }

  // .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_currentdate(), deterministic, target);
  }

  // .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_mcaststatus(), deterministic, target);
  }

  // string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multicastlistenaddr().data(), static_cast<int>(this->multicastlistenaddr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.MulticastListenAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->multicastlistenaddr(), target);
  }

  // int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->multicastlistenport(), target);
  }

  // int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tcplistenportrx(), target);
  }

  // int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tcpsendporttx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusInfo)
  return target;
}

size_t StatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secwalluuid());
  }

  // string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secwallname());
  }

  // string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddrrx());
  }

  // string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmaskrx());
  }

  // string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayrx());
  }

  // string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddrtx());
  }

  // string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmasktx());
  }

  // string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewaytx());
  }

  // string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multicastlistenaddr());
  }

  // .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *currentdate_);
  }

  // .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mcaststatus_);
  }

  // bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    total_size += 1 + 1;
  }

  // int32 PortRx = 8;
  if (this->portrx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrx());
  }

  // bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    total_size += 2 + 1;
  }

  // int32 PortTx = 16;
  if (this->porttx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->porttx());
  }

  // bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    total_size += 2 + 1;
  }

  // int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multicastlistenport());
  }

  // int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcplistenportrx());
  }

  // int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpsendporttx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatusInfo)
    MergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.secwalluuid().size() > 0) {

    secwalluuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwalluuid_);
  }
  if (from.secwallname().size() > 0) {

    secwallname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwallname_);
  }
  if (from.ipaddrrx().size() > 0) {

    ipaddrrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrrx_);
  }
  if (from.netmaskrx().size() > 0) {

    netmaskrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmaskrx_);
  }
  if (from.gatewayrx().size() > 0) {

    gatewayrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayrx_);
  }
  if (from.ipaddrtx().size() > 0) {

    ipaddrtx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrtx_);
  }
  if (from.netmasktx().size() > 0) {

    netmasktx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmasktx_);
  }
  if (from.gatewaytx().size() > 0) {

    gatewaytx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaytx_);
  }
  if (from.multicastlistenaddr().size() > 0) {

    multicastlistenaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multicastlistenaddr_);
  }
  if (from.has_currentdate()) {
    mutable_currentdate()->::BoxDate::MergeFrom(from.currentdate());
  }
  if (from.has_mcaststatus()) {
    mutable_mcaststatus()->::PortStatus::MergeFrom(from.mcaststatus());
  }
  if (from.newsecwallnamepresent() != 0) {
    set_newsecwallnamepresent(from.newsecwallnamepresent());
  }
  if (from.newiprxpresent() != 0) {
    set_newiprxpresent(from.newiprxpresent());
  }
  if (from.newrxmaskpresent() != 0) {
    set_newrxmaskpresent(from.newrxmaskpresent());
  }
  if (from.newportrxpresent() != 0) {
    set_newportrxpresent(from.newportrxpresent());
  }
  if (from.portrx() != 0) {
    set_portrx(from.portrx());
  }
  if (from.newgatewayrxpresent() != 0) {
    set_newgatewayrxpresent(from.newgatewayrxpresent());
  }
  if (from.newiptxpresent() != 0) {
    set_newiptxpresent(from.newiptxpresent());
  }
  if (from.newtxmaskpresent() != 0) {
    set_newtxmaskpresent(from.newtxmaskpresent());
  }
  if (from.newporttxpresent() != 0) {
    set_newporttxpresent(from.newporttxpresent());
  }
  if (from.porttx() != 0) {
    set_porttx(from.porttx());
  }
  if (from.newgatewaytxpresent() != 0) {
    set_newgatewaytxpresent(from.newgatewaytxpresent());
  }
  if (from.multicastlistenport() != 0) {
    set_multicastlistenport(from.multicastlistenport());
  }
  if (from.tcplistenportrx() != 0) {
    set_tcplistenportrx(from.tcplistenportrx());
  }
  if (from.tcpsendporttx() != 0) {
    set_tcpsendporttx(from.tcpsendporttx());
  }
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusInfo::InternalSwap(StatusInfo* other) {
  using std::swap;
  secwalluuid_.Swap(&other->secwalluuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secwallname_.Swap(&other->secwallname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddrrx_.Swap(&other->ipaddrrx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  netmaskrx_.Swap(&other->netmaskrx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gatewayrx_.Swap(&other->gatewayrx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddrtx_.Swap(&other->ipaddrtx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  netmasktx_.Swap(&other->netmasktx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gatewaytx_.Swap(&other->gatewaytx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  multicastlistenaddr_.Swap(&other->multicastlistenaddr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(currentdate_, other->currentdate_);
  swap(mcaststatus_, other->mcaststatus_);
  swap(newsecwallnamepresent_, other->newsecwallnamepresent_);
  swap(newiprxpresent_, other->newiprxpresent_);
  swap(newrxmaskpresent_, other->newrxmaskpresent_);
  swap(newportrxpresent_, other->newportrxpresent_);
  swap(portrx_, other->portrx_);
  swap(newgatewayrxpresent_, other->newgatewayrxpresent_);
  swap(newiptxpresent_, other->newiptxpresent_);
  swap(newtxmaskpresent_, other->newtxmaskpresent_);
  swap(newporttxpresent_, other->newporttxpresent_);
  swap(porttx_, other->porttx_);
  swap(newgatewaytxpresent_, other->newgatewaytxpresent_);
  swap(multicastlistenport_, other->multicastlistenport_);
  swap(tcplistenportrx_, other->tcplistenportrx_);
  swap(tcpsendporttx_, other->tcpsendporttx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_StatusMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StatusMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BoxDate* Arena::CreateMaybeMessage< ::BoxDate >(Arena* arena) {
  return Arena::CreateInternal< ::BoxDate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PortStatus* Arena::CreateMaybeMessage< ::PortStatus >(Arena* arena) {
  return Arena::CreateInternal< ::PortStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::StatusInfo* Arena::CreateMaybeMessage< ::StatusInfo >(Arena* arena) {
  return Arena::CreateInternal< ::StatusInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
