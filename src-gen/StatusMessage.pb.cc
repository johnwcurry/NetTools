// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StatusMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BoxDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StatusMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_StatusMessage_2eproto() {
  protobuf_AddDesc_StatusMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StatusMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BoxDate_descriptor_ = file->message_type(0);
  static const int BoxDate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, newtimepresent_),
  };
  BoxDate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoxDate_descriptor_,
      BoxDate::internal_default_instance(),
      BoxDate_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoxDate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, _internal_metadata_));
  PortStatus_descriptor_ = file->message_type(1);
  static const int PortStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, crcerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, badpkt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, uuiderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, unknownerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, unknownmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, lasterrtime_),
  };
  PortStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PortStatus_descriptor_,
      PortStatus::internal_default_instance(),
      PortStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(PortStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortStatus, _internal_metadata_));
  StatusInfo_descriptor_ = file->message_type(2);
  static const int StatusInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, secwalluuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, secwallname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newsecwallnamepresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, ipaddrrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newiprxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, netmaskrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newrxmaskpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, portrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newportrxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, gatewayrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newgatewayrxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, ipaddrtx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newiptxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, netmasktx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newtxmaskpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, porttx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newporttxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, gatewaytx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, newgatewaytxpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, currentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, mcaststatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, multicastlistenaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, multicastlistenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, tcplistenportrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, tcpsendporttx_),
  };
  StatusInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusInfo_descriptor_,
      StatusInfo::internal_default_instance(),
      StatusInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StatusMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoxDate_descriptor_, BoxDate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PortStatus_descriptor_, PortStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusInfo_descriptor_, StatusInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StatusMessage_2eproto() {
  BoxDate_default_instance_.Shutdown();
  delete BoxDate_reflection_;
  PortStatus_default_instance_.Shutdown();
  delete PortStatus_reflection_;
  StatusInfo_default_instance_.Shutdown();
  delete StatusInfo_reflection_;
}

void protobuf_InitDefaults_StatusMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  BoxDate_default_instance_.DefaultConstruct();
  PortStatus_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StatusInfo_default_instance_.DefaultConstruct();
  BoxDate_default_instance_.get_mutable()->InitAsDefaultInstance();
  PortStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  StatusInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_StatusMessage_2eproto_once_);
void protobuf_InitDefaults_StatusMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_StatusMessage_2eproto_once_,
                 &protobuf_InitDefaults_StatusMessage_2eproto_impl);
}
void protobuf_AddDesc_StatusMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_StatusMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023StatusMessage.proto\"y\n\007BoxDate\022\014\n\004Year"
    "\030\001 \001(\005\022\r\n\005Month\030\002 \001(\005\022\013\n\003Day\030\003 \001(\005\022\014\n\004Ho"
    "ur\030\004 \001(\005\022\016\n\006Minute\030\005 \001(\005\022\016\n\006Second\030\006 \001(\005"
    "\022\026\n\016NewTimePresent\030\007 \001(\010\"\244\001\n\nPortStatus\022"
    "\014\n\004Sent\030\001 \001(\005\022\020\n\010Received\030\002 \001(\005\022\016\n\006CrcEr"
    "r\030\003 \001(\005\022\016\n\006BadPkt\030\004 \001(\005\022\017\n\007UuidErr\030\005 \001(\005"
    "\022\022\n\nUnknownErr\030\006 \001(\005\022\022\n\nUnknownMsg\030\007 \001(\005"
    "\022\035\n\013LastErrTime\030\010 \001(\0132\010.BoxDate\"\342\004\n\nStat"
    "usInfo\022\023\n\013SecWallUuid\030\001 \001(\t\022\023\n\013SecWallNa"
    "me\030\002 \001(\t\022\035\n\025NewSecWallNamePresent\030\003 \001(\010\022"
    "\020\n\010IpAddrRx\030\004 \001(\t\022\026\n\016NewIpRxPresent\030\005 \001("
    "\010\022\021\n\tNetMaskRx\030\006 \001(\t\022\030\n\020NewRxMaskPresent"
    "\030\007 \001(\010\022\016\n\006PortRx\030\010 \001(\005\022\030\n\020NewPortRxPrese"
    "nt\030\t \001(\010\022\021\n\tGatewayRx\030\n \001(\t\022\033\n\023NewGatewa"
    "yRxPresent\030\013 \001(\010\022\020\n\010IpAddrTx\030\014 \001(\t\022\026\n\016Ne"
    "wIpTxPresent\030\r \001(\010\022\021\n\tNetMaskTx\030\016 \001(\t\022\030\n"
    "\020NewTxMaskPresent\030\017 \001(\010\022\016\n\006PortTx\030\020 \001(\005\022"
    "\030\n\020NewPortTxPresent\030\021 \001(\010\022\021\n\tGatewayTx\030\022"
    " \001(\t\022\033\n\023NewGatewayTxPresent\030\023 \001(\010\022\035\n\013Cur"
    "rentDate\030\024 \001(\0132\010.BoxDate\022 \n\013McastStatus\030"
    "\025 \001(\0132\013.PortStatus\022\033\n\023MulticastListenAdd"
    "r\030\026 \001(\t\022\033\n\023MulticastListenPort\030\027 \001(\005\022\027\n\017"
    "TcpListenPortRx\030\030 \001(\005\022\025\n\rTcpSendPortTx\030\031"
    " \001(\005b\006proto3", 932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatusMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StatusMessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_StatusMessage_2eproto_once_);
void protobuf_AddDesc_StatusMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_StatusMessage_2eproto_once_,
                 &protobuf_AddDesc_StatusMessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StatusMessage_2eproto {
  StaticDescriptorInitializer_StatusMessage_2eproto() {
    protobuf_AddDesc_StatusMessage_2eproto();
  }
} static_descriptor_initializer_StatusMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxDate::kYearFieldNumber;
const int BoxDate::kMonthFieldNumber;
const int BoxDate::kDayFieldNumber;
const int BoxDate::kHourFieldNumber;
const int BoxDate::kMinuteFieldNumber;
const int BoxDate::kSecondFieldNumber;
const int BoxDate::kNewTimePresentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxDate::BoxDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StatusMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoxDate)
}

void BoxDate::InitAsDefaultInstance() {
}

BoxDate::BoxDate(const BoxDate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BoxDate)
}

void BoxDate::SharedCtor() {
  ::memset(&year_, 0, reinterpret_cast<char*>(&newtimepresent_) -
    reinterpret_cast<char*>(&year_) + sizeof(newtimepresent_));
  _cached_size_ = 0;
}

BoxDate::~BoxDate() {
  // @@protoc_insertion_point(destructor:BoxDate)
  SharedDtor();
}

void BoxDate::SharedDtor() {
}

void BoxDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxDate_descriptor_;
}

const BoxDate& BoxDate::default_instance() {
  protobuf_InitDefaults_StatusMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoxDate> BoxDate_default_instance_;

BoxDate* BoxDate::New(::google::protobuf::Arena* arena) const {
  BoxDate* n = new BoxDate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxDate::Clear() {
// @@protoc_insertion_point(message_clear_start:BoxDate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoxDate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoxDate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(year_, newtimepresent_);

#undef ZR_HELPER_
#undef ZR_

}

bool BoxDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoxDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Year = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Month;
        break;
      }

      // optional int32 Month = 2;
      case 2: {
        if (tag == 16) {
         parse_Month:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Day;
        break;
      }

      // optional int32 Day = 3;
      case 3: {
        if (tag == 24) {
         parse_Day:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Hour;
        break;
      }

      // optional int32 Hour = 4;
      case 4: {
        if (tag == 32) {
         parse_Hour:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Minute;
        break;
      }

      // optional int32 Minute = 5;
      case 5: {
        if (tag == 40) {
         parse_Minute:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Second;
        break;
      }

      // optional int32 Second = 6;
      case 6: {
        if (tag == 48) {
         parse_Second:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_NewTimePresent;
        break;
      }

      // optional bool NewTimePresent = 7;
      case 7: {
        if (tag == 56) {
         parse_NewTimePresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newtimepresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoxDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoxDate)
  return false;
#undef DO_
}

void BoxDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoxDate)
  // optional int32 Year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 Month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 Day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 Hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // optional int32 Minute = 5;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minute(), output);
  }

  // optional int32 Second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  // optional bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newtimepresent(), output);
  }

  // @@protoc_insertion_point(serialize_end:BoxDate)
}

::google::protobuf::uint8* BoxDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BoxDate)
  // optional int32 Year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 Month = 2;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 Day = 3;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 Hour = 4;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // optional int32 Minute = 5;
  if (this->minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minute(), target);
  }

  // optional int32 Second = 6;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  // optional bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newtimepresent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BoxDate)
  return target;
}

size_t BoxDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoxDate)
  size_t total_size = 0;

  // optional int32 Year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // optional int32 Month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // optional int32 Day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // optional int32 Hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  // optional int32 Minute = 5;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minute());
  }

  // optional int32 Second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second());
  }

  // optional bool NewTimePresent = 7;
  if (this->newtimepresent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoxDate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoxDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoxDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoxDate)
    UnsafeMergeFrom(*source);
  }
}

void BoxDate::MergeFrom(const BoxDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoxDate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoxDate::UnsafeMergeFrom(const BoxDate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
  if (from.newtimepresent() != 0) {
    set_newtimepresent(from.newtimepresent());
  }
}

void BoxDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoxDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDate::CopyFrom(const BoxDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoxDate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoxDate::IsInitialized() const {

  return true;
}

void BoxDate::Swap(BoxDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxDate::InternalSwap(BoxDate* other) {
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_, other->second_);
  std::swap(newtimepresent_, other->newtimepresent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxDate_descriptor_;
  metadata.reflection = BoxDate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxDate

// optional int32 Year = 1;
void BoxDate::clear_year() {
  year_ = 0;
}
::google::protobuf::int32 BoxDate::year() const {
  // @@protoc_insertion_point(field_get:BoxDate.Year)
  return year_;
}
void BoxDate::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Year)
}

// optional int32 Month = 2;
void BoxDate::clear_month() {
  month_ = 0;
}
::google::protobuf::int32 BoxDate::month() const {
  // @@protoc_insertion_point(field_get:BoxDate.Month)
  return month_;
}
void BoxDate::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Month)
}

// optional int32 Day = 3;
void BoxDate::clear_day() {
  day_ = 0;
}
::google::protobuf::int32 BoxDate::day() const {
  // @@protoc_insertion_point(field_get:BoxDate.Day)
  return day_;
}
void BoxDate::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Day)
}

// optional int32 Hour = 4;
void BoxDate::clear_hour() {
  hour_ = 0;
}
::google::protobuf::int32 BoxDate::hour() const {
  // @@protoc_insertion_point(field_get:BoxDate.Hour)
  return hour_;
}
void BoxDate::set_hour(::google::protobuf::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Hour)
}

// optional int32 Minute = 5;
void BoxDate::clear_minute() {
  minute_ = 0;
}
::google::protobuf::int32 BoxDate::minute() const {
  // @@protoc_insertion_point(field_get:BoxDate.Minute)
  return minute_;
}
void BoxDate::set_minute(::google::protobuf::int32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Minute)
}

// optional int32 Second = 6;
void BoxDate::clear_second() {
  second_ = 0;
}
::google::protobuf::int32 BoxDate::second() const {
  // @@protoc_insertion_point(field_get:BoxDate.Second)
  return second_;
}
void BoxDate::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Second)
}

// optional bool NewTimePresent = 7;
void BoxDate::clear_newtimepresent() {
  newtimepresent_ = false;
}
bool BoxDate::newtimepresent() const {
  // @@protoc_insertion_point(field_get:BoxDate.NewTimePresent)
  return newtimepresent_;
}
void BoxDate::set_newtimepresent(bool value) {
  
  newtimepresent_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.NewTimePresent)
}

inline const BoxDate* BoxDate::internal_default_instance() {
  return &BoxDate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortStatus::kSentFieldNumber;
const int PortStatus::kReceivedFieldNumber;
const int PortStatus::kCrcErrFieldNumber;
const int PortStatus::kBadPktFieldNumber;
const int PortStatus::kUuidErrFieldNumber;
const int PortStatus::kUnknownErrFieldNumber;
const int PortStatus::kUnknownMsgFieldNumber;
const int PortStatus::kLastErrTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortStatus::PortStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StatusMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PortStatus)
}

void PortStatus::InitAsDefaultInstance() {
  lasterrtime_ = const_cast< ::BoxDate*>(
      ::BoxDate::internal_default_instance());
}

PortStatus::PortStatus(const PortStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PortStatus)
}

void PortStatus::SharedCtor() {
  lasterrtime_ = NULL;
  ::memset(&sent_, 0, reinterpret_cast<char*>(&unknownmsg_) -
    reinterpret_cast<char*>(&sent_) + sizeof(unknownmsg_));
  _cached_size_ = 0;
}

PortStatus::~PortStatus() {
  // @@protoc_insertion_point(destructor:PortStatus)
  SharedDtor();
}

void PortStatus::SharedDtor() {
  if (this != &PortStatus_default_instance_.get()) {
    delete lasterrtime_;
  }
}

void PortStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortStatus_descriptor_;
}

const PortStatus& PortStatus::default_instance() {
  protobuf_InitDefaults_StatusMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PortStatus> PortStatus_default_instance_;

PortStatus* PortStatus::New(::google::protobuf::Arena* arena) const {
  PortStatus* n = new PortStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PortStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PortStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PortStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sent_, unknownmsg_);
  if (GetArenaNoVirtual() == NULL && lasterrtime_ != NULL) delete lasterrtime_;
  lasterrtime_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool PortStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PortStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sent = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Received;
        break;
      }

      // optional int32 Received = 2;
      case 2: {
        if (tag == 16) {
         parse_Received:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CrcErr;
        break;
      }

      // optional int32 CrcErr = 3;
      case 3: {
        if (tag == 24) {
         parse_CrcErr:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crcerr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BadPkt;
        break;
      }

      // optional int32 BadPkt = 4;
      case 4: {
        if (tag == 32) {
         parse_BadPkt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badpkt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UuidErr;
        break;
      }

      // optional int32 UuidErr = 5;
      case 5: {
        if (tag == 40) {
         parse_UuidErr:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuiderr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_UnknownErr;
        break;
      }

      // optional int32 UnknownErr = 6;
      case 6: {
        if (tag == 48) {
         parse_UnknownErr:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknownerr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_UnknownMsg;
        break;
      }

      // optional int32 UnknownMsg = 7;
      case 7: {
        if (tag == 56) {
         parse_UnknownMsg:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknownmsg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LastErrTime;
        break;
      }

      // optional .BoxDate LastErrTime = 8;
      case 8: {
        if (tag == 66) {
         parse_LastErrTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lasterrtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PortStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PortStatus)
  return false;
#undef DO_
}

void PortStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PortStatus)
  // optional int32 Sent = 1;
  if (this->sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sent(), output);
  }

  // optional int32 Received = 2;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->received(), output);
  }

  // optional int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->crcerr(), output);
  }

  // optional int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->badpkt(), output);
  }

  // optional int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uuiderr(), output);
  }

  // optional int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unknownerr(), output);
  }

  // optional int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unknownmsg(), output);
  }

  // optional .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->lasterrtime_, output);
  }

  // @@protoc_insertion_point(serialize_end:PortStatus)
}

::google::protobuf::uint8* PortStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PortStatus)
  // optional int32 Sent = 1;
  if (this->sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sent(), target);
  }

  // optional int32 Received = 2;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->received(), target);
  }

  // optional int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->crcerr(), target);
  }

  // optional int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->badpkt(), target);
  }

  // optional int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uuiderr(), target);
  }

  // optional int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unknownerr(), target);
  }

  // optional int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unknownmsg(), target);
  }

  // optional .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->lasterrtime_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PortStatus)
  return target;
}

size_t PortStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PortStatus)
  size_t total_size = 0;

  // optional int32 Sent = 1;
  if (this->sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sent());
  }

  // optional int32 Received = 2;
  if (this->received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->received());
  }

  // optional int32 CrcErr = 3;
  if (this->crcerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crcerr());
  }

  // optional int32 BadPkt = 4;
  if (this->badpkt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->badpkt());
  }

  // optional int32 UuidErr = 5;
  if (this->uuiderr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uuiderr());
  }

  // optional int32 UnknownErr = 6;
  if (this->unknownerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unknownerr());
  }

  // optional int32 UnknownMsg = 7;
  if (this->unknownmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unknownmsg());
  }

  // optional .BoxDate LastErrTime = 8;
  if (this->has_lasterrtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lasterrtime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PortStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PortStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PortStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PortStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PortStatus)
    UnsafeMergeFrom(*source);
  }
}

void PortStatus::MergeFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PortStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PortStatus::UnsafeMergeFrom(const PortStatus& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sent() != 0) {
    set_sent(from.sent());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.crcerr() != 0) {
    set_crcerr(from.crcerr());
  }
  if (from.badpkt() != 0) {
    set_badpkt(from.badpkt());
  }
  if (from.uuiderr() != 0) {
    set_uuiderr(from.uuiderr());
  }
  if (from.unknownerr() != 0) {
    set_unknownerr(from.unknownerr());
  }
  if (from.unknownmsg() != 0) {
    set_unknownmsg(from.unknownmsg());
  }
  if (from.has_lasterrtime()) {
    mutable_lasterrtime()->::BoxDate::MergeFrom(from.lasterrtime());
  }
}

void PortStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortStatus::CopyFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PortStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PortStatus::IsInitialized() const {

  return true;
}

void PortStatus::Swap(PortStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortStatus::InternalSwap(PortStatus* other) {
  std::swap(sent_, other->sent_);
  std::swap(received_, other->received_);
  std::swap(crcerr_, other->crcerr_);
  std::swap(badpkt_, other->badpkt_);
  std::swap(uuiderr_, other->uuiderr_);
  std::swap(unknownerr_, other->unknownerr_);
  std::swap(unknownmsg_, other->unknownmsg_);
  std::swap(lasterrtime_, other->lasterrtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortStatus_descriptor_;
  metadata.reflection = PortStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PortStatus

// optional int32 Sent = 1;
void PortStatus::clear_sent() {
  sent_ = 0;
}
::google::protobuf::int32 PortStatus::sent() const {
  // @@protoc_insertion_point(field_get:PortStatus.Sent)
  return sent_;
}
void PortStatus::set_sent(::google::protobuf::int32 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.Sent)
}

// optional int32 Received = 2;
void PortStatus::clear_received() {
  received_ = 0;
}
::google::protobuf::int32 PortStatus::received() const {
  // @@protoc_insertion_point(field_get:PortStatus.Received)
  return received_;
}
void PortStatus::set_received(::google::protobuf::int32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.Received)
}

// optional int32 CrcErr = 3;
void PortStatus::clear_crcerr() {
  crcerr_ = 0;
}
::google::protobuf::int32 PortStatus::crcerr() const {
  // @@protoc_insertion_point(field_get:PortStatus.CrcErr)
  return crcerr_;
}
void PortStatus::set_crcerr(::google::protobuf::int32 value) {
  
  crcerr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.CrcErr)
}

// optional int32 BadPkt = 4;
void PortStatus::clear_badpkt() {
  badpkt_ = 0;
}
::google::protobuf::int32 PortStatus::badpkt() const {
  // @@protoc_insertion_point(field_get:PortStatus.BadPkt)
  return badpkt_;
}
void PortStatus::set_badpkt(::google::protobuf::int32 value) {
  
  badpkt_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.BadPkt)
}

// optional int32 UuidErr = 5;
void PortStatus::clear_uuiderr() {
  uuiderr_ = 0;
}
::google::protobuf::int32 PortStatus::uuiderr() const {
  // @@protoc_insertion_point(field_get:PortStatus.UuidErr)
  return uuiderr_;
}
void PortStatus::set_uuiderr(::google::protobuf::int32 value) {
  
  uuiderr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UuidErr)
}

// optional int32 UnknownErr = 6;
void PortStatus::clear_unknownerr() {
  unknownerr_ = 0;
}
::google::protobuf::int32 PortStatus::unknownerr() const {
  // @@protoc_insertion_point(field_get:PortStatus.UnknownErr)
  return unknownerr_;
}
void PortStatus::set_unknownerr(::google::protobuf::int32 value) {
  
  unknownerr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UnknownErr)
}

// optional int32 UnknownMsg = 7;
void PortStatus::clear_unknownmsg() {
  unknownmsg_ = 0;
}
::google::protobuf::int32 PortStatus::unknownmsg() const {
  // @@protoc_insertion_point(field_get:PortStatus.UnknownMsg)
  return unknownmsg_;
}
void PortStatus::set_unknownmsg(::google::protobuf::int32 value) {
  
  unknownmsg_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UnknownMsg)
}

// optional .BoxDate LastErrTime = 8;
bool PortStatus::has_lasterrtime() const {
  return this != internal_default_instance() && lasterrtime_ != NULL;
}
void PortStatus::clear_lasterrtime() {
  if (GetArenaNoVirtual() == NULL && lasterrtime_ != NULL) delete lasterrtime_;
  lasterrtime_ = NULL;
}
const ::BoxDate& PortStatus::lasterrtime() const {
  // @@protoc_insertion_point(field_get:PortStatus.LastErrTime)
  return lasterrtime_ != NULL ? *lasterrtime_
                         : *::BoxDate::internal_default_instance();
}
::BoxDate* PortStatus::mutable_lasterrtime() {
  
  if (lasterrtime_ == NULL) {
    lasterrtime_ = new ::BoxDate;
  }
  // @@protoc_insertion_point(field_mutable:PortStatus.LastErrTime)
  return lasterrtime_;
}
::BoxDate* PortStatus::release_lasterrtime() {
  // @@protoc_insertion_point(field_release:PortStatus.LastErrTime)
  
  ::BoxDate* temp = lasterrtime_;
  lasterrtime_ = NULL;
  return temp;
}
void PortStatus::set_allocated_lasterrtime(::BoxDate* lasterrtime) {
  delete lasterrtime_;
  lasterrtime_ = lasterrtime;
  if (lasterrtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PortStatus.LastErrTime)
}

inline const PortStatus* PortStatus::internal_default_instance() {
  return &PortStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusInfo::kSecWallUuidFieldNumber;
const int StatusInfo::kSecWallNameFieldNumber;
const int StatusInfo::kNewSecWallNamePresentFieldNumber;
const int StatusInfo::kIpAddrRxFieldNumber;
const int StatusInfo::kNewIpRxPresentFieldNumber;
const int StatusInfo::kNetMaskRxFieldNumber;
const int StatusInfo::kNewRxMaskPresentFieldNumber;
const int StatusInfo::kPortRxFieldNumber;
const int StatusInfo::kNewPortRxPresentFieldNumber;
const int StatusInfo::kGatewayRxFieldNumber;
const int StatusInfo::kNewGatewayRxPresentFieldNumber;
const int StatusInfo::kIpAddrTxFieldNumber;
const int StatusInfo::kNewIpTxPresentFieldNumber;
const int StatusInfo::kNetMaskTxFieldNumber;
const int StatusInfo::kNewTxMaskPresentFieldNumber;
const int StatusInfo::kPortTxFieldNumber;
const int StatusInfo::kNewPortTxPresentFieldNumber;
const int StatusInfo::kGatewayTxFieldNumber;
const int StatusInfo::kNewGatewayTxPresentFieldNumber;
const int StatusInfo::kCurrentDateFieldNumber;
const int StatusInfo::kMcastStatusFieldNumber;
const int StatusInfo::kMulticastListenAddrFieldNumber;
const int StatusInfo::kMulticastListenPortFieldNumber;
const int StatusInfo::kTcpListenPortRxFieldNumber;
const int StatusInfo::kTcpSendPortTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusInfo::StatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StatusMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatusInfo)
}

void StatusInfo::InitAsDefaultInstance() {
  currentdate_ = const_cast< ::BoxDate*>(
      ::BoxDate::internal_default_instance());
  mcaststatus_ = const_cast< ::PortStatus*>(
      ::PortStatus::internal_default_instance());
}

StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StatusInfo)
}

void StatusInfo::SharedCtor() {
  secwalluuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayrx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewaytx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastlistenaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentdate_ = NULL;
  mcaststatus_ = NULL;
  ::memset(&newsecwallnamepresent_, 0, reinterpret_cast<char*>(&tcpsendporttx_) -
    reinterpret_cast<char*>(&newsecwallnamepresent_) + sizeof(tcpsendporttx_));
  _cached_size_ = 0;
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:StatusInfo)
  SharedDtor();
}

void StatusInfo::SharedDtor() {
  secwalluuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayrx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewaytx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastlistenaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &StatusInfo_default_instance_.get()) {
    delete currentdate_;
    delete mcaststatus_;
  }
}

void StatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_descriptor_;
}

const StatusInfo& StatusInfo::default_instance() {
  protobuf_InitDefaults_StatusMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StatusInfo> StatusInfo_default_instance_;

StatusInfo* StatusInfo::New(::google::protobuf::Arena* arena) const {
  StatusInfo* n = new StatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StatusInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(newsecwallnamepresent_, newrxmaskpresent_);
  secwalluuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secwallname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrx_ = 0;
  ZR_(newgatewayrxpresent_, newtxmaskpresent_);
  newportrxpresent_ = false;
  gatewayrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddrtx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmasktx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porttx_ = 0;
  ZR_(newgatewaytxpresent_, tcplistenportrx_);
  newporttxpresent_ = false;
  gatewaytx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && currentdate_ != NULL) delete currentdate_;
  currentdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcaststatus_ != NULL) delete mcaststatus_;
  mcaststatus_ = NULL;
  multicastlistenaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcpsendporttx_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SecWallUuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secwalluuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secwalluuid().data(), this->secwalluuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.SecWallUuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SecWallName;
        break;
      }

      // optional string SecWallName = 2;
      case 2: {
        if (tag == 18) {
         parse_SecWallName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secwallname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secwallname().data(), this->secwallname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.SecWallName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NewSecWallNamePresent;
        break;
      }

      // optional bool NewSecWallNamePresent = 3;
      case 3: {
        if (tag == 24) {
         parse_NewSecWallNamePresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newsecwallnamepresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_IpAddrRx;
        break;
      }

      // optional string IpAddrRx = 4;
      case 4: {
        if (tag == 34) {
         parse_IpAddrRx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddrrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddrrx().data(), this->ipaddrrx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.IpAddrRx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NewIpRxPresent;
        break;
      }

      // optional bool NewIpRxPresent = 5;
      case 5: {
        if (tag == 40) {
         parse_NewIpRxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newiprxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_NetMaskRx;
        break;
      }

      // optional string NetMaskRx = 6;
      case 6: {
        if (tag == 50) {
         parse_NetMaskRx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmaskrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmaskrx().data(), this->netmaskrx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.NetMaskRx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_NewRxMaskPresent;
        break;
      }

      // optional bool NewRxMaskPresent = 7;
      case 7: {
        if (tag == 56) {
         parse_NewRxMaskPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newrxmaskpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PortRx;
        break;
      }

      // optional int32 PortRx = 8;
      case 8: {
        if (tag == 64) {
         parse_PortRx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_NewPortRxPresent;
        break;
      }

      // optional bool NewPortRxPresent = 9;
      case 9: {
        if (tag == 72) {
         parse_NewPortRxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newportrxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GatewayRx;
        break;
      }

      // optional string GatewayRx = 10;
      case 10: {
        if (tag == 82) {
         parse_GatewayRx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayrx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayrx().data(), this->gatewayrx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.GatewayRx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_NewGatewayRxPresent;
        break;
      }

      // optional bool NewGatewayRxPresent = 11;
      case 11: {
        if (tag == 88) {
         parse_NewGatewayRxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newgatewayrxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_IpAddrTx;
        break;
      }

      // optional string IpAddrTx = 12;
      case 12: {
        if (tag == 98) {
         parse_IpAddrTx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddrtx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddrtx().data(), this->ipaddrtx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.IpAddrTx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_NewIpTxPresent;
        break;
      }

      // optional bool NewIpTxPresent = 13;
      case 13: {
        if (tag == 104) {
         parse_NewIpTxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newiptxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_NetMaskTx;
        break;
      }

      // optional string NetMaskTx = 14;
      case 14: {
        if (tag == 114) {
         parse_NetMaskTx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmasktx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmasktx().data(), this->netmasktx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.NetMaskTx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_NewTxMaskPresent;
        break;
      }

      // optional bool NewTxMaskPresent = 15;
      case 15: {
        if (tag == 120) {
         parse_NewTxMaskPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newtxmaskpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_PortTx;
        break;
      }

      // optional int32 PortTx = 16;
      case 16: {
        if (tag == 128) {
         parse_PortTx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &porttx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_NewPortTxPresent;
        break;
      }

      // optional bool NewPortTxPresent = 17;
      case 17: {
        if (tag == 136) {
         parse_NewPortTxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newporttxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_GatewayTx;
        break;
      }

      // optional string GatewayTx = 18;
      case 18: {
        if (tag == 146) {
         parse_GatewayTx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewaytx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewaytx().data(), this->gatewaytx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.GatewayTx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_NewGatewayTxPresent;
        break;
      }

      // optional bool NewGatewayTxPresent = 19;
      case 19: {
        if (tag == 152) {
         parse_NewGatewayTxPresent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newgatewaytxpresent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_CurrentDate;
        break;
      }

      // optional .BoxDate CurrentDate = 20;
      case 20: {
        if (tag == 162) {
         parse_CurrentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_McastStatus;
        break;
      }

      // optional .PortStatus McastStatus = 21;
      case 21: {
        if (tag == 170) {
         parse_McastStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mcaststatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_MulticastListenAddr;
        break;
      }

      // optional string MulticastListenAddr = 22;
      case 22: {
        if (tag == 178) {
         parse_MulticastListenAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multicastlistenaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multicastlistenaddr().data(), this->multicastlistenaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusInfo.MulticastListenAddr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_MulticastListenPort;
        break;
      }

      // optional int32 MulticastListenPort = 23;
      case 23: {
        if (tag == 184) {
         parse_MulticastListenPort:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multicastlistenport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_TcpListenPortRx;
        break;
      }

      // optional int32 TcpListenPortRx = 24;
      case 24: {
        if (tag == 192) {
         parse_TcpListenPortRx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcplistenportrx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_TcpSendPortTx;
        break;
      }

      // optional int32 TcpSendPortTx = 25;
      case 25: {
        if (tag == 200) {
         parse_TcpSendPortTx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpsendporttx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatusInfo)
  return false;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatusInfo)
  // optional string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwalluuid().data(), this->secwalluuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallUuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->secwalluuid(), output);
  }

  // optional string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwallname().data(), this->secwallname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secwallname(), output);
  }

  // optional bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->newsecwallnamepresent(), output);
  }

  // optional string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrrx().data(), this->ipaddrrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ipaddrrx(), output);
  }

  // optional bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->newiprxpresent(), output);
  }

  // optional string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmaskrx().data(), this->netmaskrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->netmaskrx(), output);
  }

  // optional bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newrxmaskpresent(), output);
  }

  // optional int32 PortRx = 8;
  if (this->portrx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->portrx(), output);
  }

  // optional bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->newportrxpresent(), output);
  }

  // optional string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayrx().data(), this->gatewayrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayRx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gatewayrx(), output);
  }

  // optional bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->newgatewayrxpresent(), output);
  }

  // optional string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrtx().data(), this->ipaddrtx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ipaddrtx(), output);
  }

  // optional bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->newiptxpresent(), output);
  }

  // optional string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmasktx().data(), this->netmasktx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->netmasktx(), output);
  }

  // optional bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->newtxmaskpresent(), output);
  }

  // optional int32 PortTx = 16;
  if (this->porttx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->porttx(), output);
  }

  // optional bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->newporttxpresent(), output);
  }

  // optional string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaytx().data(), this->gatewaytx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayTx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->gatewaytx(), output);
  }

  // optional bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->newgatewaytxpresent(), output);
  }

  // optional .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->currentdate_, output);
  }

  // optional .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->mcaststatus_, output);
  }

  // optional string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multicastlistenaddr().data(), this->multicastlistenaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.MulticastListenAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->multicastlistenaddr(), output);
  }

  // optional int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->multicastlistenport(), output);
  }

  // optional int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tcplistenportrx(), output);
  }

  // optional int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tcpsendporttx(), output);
  }

  // @@protoc_insertion_point(serialize_end:StatusInfo)
}

::google::protobuf::uint8* StatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StatusInfo)
  // optional string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwalluuid().data(), this->secwalluuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallUuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secwalluuid(), target);
  }

  // optional string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secwallname().data(), this->secwallname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.SecWallName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secwallname(), target);
  }

  // optional bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->newsecwallnamepresent(), target);
  }

  // optional string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrrx().data(), this->ipaddrrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ipaddrrx(), target);
  }

  // optional bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->newiprxpresent(), target);
  }

  // optional string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmaskrx().data(), this->netmaskrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->netmaskrx(), target);
  }

  // optional bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newrxmaskpresent(), target);
  }

  // optional int32 PortRx = 8;
  if (this->portrx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->portrx(), target);
  }

  // optional bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->newportrxpresent(), target);
  }

  // optional string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayrx().data(), this->gatewayrx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayRx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gatewayrx(), target);
  }

  // optional bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->newgatewayrxpresent(), target);
  }

  // optional string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddrtx().data(), this->ipaddrtx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.IpAddrTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ipaddrtx(), target);
  }

  // optional bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->newiptxpresent(), target);
  }

  // optional string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmasktx().data(), this->netmasktx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.NetMaskTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->netmasktx(), target);
  }

  // optional bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->newtxmaskpresent(), target);
  }

  // optional int32 PortTx = 16;
  if (this->porttx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->porttx(), target);
  }

  // optional bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->newporttxpresent(), target);
  }

  // optional string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaytx().data(), this->gatewaytx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.GatewayTx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gatewaytx(), target);
  }

  // optional bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->newgatewaytxpresent(), target);
  }

  // optional .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->currentdate_, false, target);
  }

  // optional .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->mcaststatus_, false, target);
  }

  // optional string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multicastlistenaddr().data(), this->multicastlistenaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusInfo.MulticastListenAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->multicastlistenaddr(), target);
  }

  // optional int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->multicastlistenport(), target);
  }

  // optional int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tcplistenportrx(), target);
  }

  // optional int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tcpsendporttx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StatusInfo)
  return target;
}

size_t StatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusInfo)
  size_t total_size = 0;

  // optional string SecWallUuid = 1;
  if (this->secwalluuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secwalluuid());
  }

  // optional string SecWallName = 2;
  if (this->secwallname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secwallname());
  }

  // optional bool NewSecWallNamePresent = 3;
  if (this->newsecwallnamepresent() != 0) {
    total_size += 1 + 1;
  }

  // optional string IpAddrRx = 4;
  if (this->ipaddrrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddrrx());
  }

  // optional bool NewIpRxPresent = 5;
  if (this->newiprxpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional string NetMaskRx = 6;
  if (this->netmaskrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmaskrx());
  }

  // optional bool NewRxMaskPresent = 7;
  if (this->newrxmaskpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 PortRx = 8;
  if (this->portrx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrx());
  }

  // optional bool NewPortRxPresent = 9;
  if (this->newportrxpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional string GatewayRx = 10;
  if (this->gatewayrx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayrx());
  }

  // optional bool NewGatewayRxPresent = 11;
  if (this->newgatewayrxpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional string IpAddrTx = 12;
  if (this->ipaddrtx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddrtx());
  }

  // optional bool NewIpTxPresent = 13;
  if (this->newiptxpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional string NetMaskTx = 14;
  if (this->netmasktx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmasktx());
  }

  // optional bool NewTxMaskPresent = 15;
  if (this->newtxmaskpresent() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 PortTx = 16;
  if (this->porttx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->porttx());
  }

  // optional bool NewPortTxPresent = 17;
  if (this->newporttxpresent() != 0) {
    total_size += 2 + 1;
  }

  // optional string GatewayTx = 18;
  if (this->gatewaytx().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewaytx());
  }

  // optional bool NewGatewayTxPresent = 19;
  if (this->newgatewaytxpresent() != 0) {
    total_size += 2 + 1;
  }

  // optional .BoxDate CurrentDate = 20;
  if (this->has_currentdate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentdate_);
  }

  // optional .PortStatus McastStatus = 21;
  if (this->has_mcaststatus()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mcaststatus_);
  }

  // optional string MulticastListenAddr = 22;
  if (this->multicastlistenaddr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multicastlistenaddr());
  }

  // optional int32 MulticastListenPort = 23;
  if (this->multicastlistenport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multicastlistenport());
  }

  // optional int32 TcpListenPortRx = 24;
  if (this->tcplistenportrx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcplistenportrx());
  }

  // optional int32 TcpSendPortTx = 25;
  if (this->tcpsendporttx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpsendporttx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatusInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatusInfo)
    UnsafeMergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StatusInfo::UnsafeMergeFrom(const StatusInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.secwalluuid().size() > 0) {

    secwalluuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwalluuid_);
  }
  if (from.secwallname().size() > 0) {

    secwallname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secwallname_);
  }
  if (from.newsecwallnamepresent() != 0) {
    set_newsecwallnamepresent(from.newsecwallnamepresent());
  }
  if (from.ipaddrrx().size() > 0) {

    ipaddrrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrrx_);
  }
  if (from.newiprxpresent() != 0) {
    set_newiprxpresent(from.newiprxpresent());
  }
  if (from.netmaskrx().size() > 0) {

    netmaskrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmaskrx_);
  }
  if (from.newrxmaskpresent() != 0) {
    set_newrxmaskpresent(from.newrxmaskpresent());
  }
  if (from.portrx() != 0) {
    set_portrx(from.portrx());
  }
  if (from.newportrxpresent() != 0) {
    set_newportrxpresent(from.newportrxpresent());
  }
  if (from.gatewayrx().size() > 0) {

    gatewayrx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayrx_);
  }
  if (from.newgatewayrxpresent() != 0) {
    set_newgatewayrxpresent(from.newgatewayrxpresent());
  }
  if (from.ipaddrtx().size() > 0) {

    ipaddrtx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddrtx_);
  }
  if (from.newiptxpresent() != 0) {
    set_newiptxpresent(from.newiptxpresent());
  }
  if (from.netmasktx().size() > 0) {

    netmasktx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmasktx_);
  }
  if (from.newtxmaskpresent() != 0) {
    set_newtxmaskpresent(from.newtxmaskpresent());
  }
  if (from.porttx() != 0) {
    set_porttx(from.porttx());
  }
  if (from.newporttxpresent() != 0) {
    set_newporttxpresent(from.newporttxpresent());
  }
  if (from.gatewaytx().size() > 0) {

    gatewaytx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaytx_);
  }
  if (from.newgatewaytxpresent() != 0) {
    set_newgatewaytxpresent(from.newgatewaytxpresent());
  }
  if (from.has_currentdate()) {
    mutable_currentdate()->::BoxDate::MergeFrom(from.currentdate());
  }
  if (from.has_mcaststatus()) {
    mutable_mcaststatus()->::PortStatus::MergeFrom(from.mcaststatus());
  }
  if (from.multicastlistenaddr().size() > 0) {

    multicastlistenaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multicastlistenaddr_);
  }
  if (from.multicastlistenport() != 0) {
    set_multicastlistenport(from.multicastlistenport());
  }
  if (from.tcplistenportrx() != 0) {
    set_tcplistenportrx(from.tcplistenportrx());
  }
  if (from.tcpsendporttx() != 0) {
    set_tcpsendporttx(from.tcpsendporttx());
  }
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StatusInfo::IsInitialized() const {

  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusInfo::InternalSwap(StatusInfo* other) {
  secwalluuid_.Swap(&other->secwalluuid_);
  secwallname_.Swap(&other->secwallname_);
  std::swap(newsecwallnamepresent_, other->newsecwallnamepresent_);
  ipaddrrx_.Swap(&other->ipaddrrx_);
  std::swap(newiprxpresent_, other->newiprxpresent_);
  netmaskrx_.Swap(&other->netmaskrx_);
  std::swap(newrxmaskpresent_, other->newrxmaskpresent_);
  std::swap(portrx_, other->portrx_);
  std::swap(newportrxpresent_, other->newportrxpresent_);
  gatewayrx_.Swap(&other->gatewayrx_);
  std::swap(newgatewayrxpresent_, other->newgatewayrxpresent_);
  ipaddrtx_.Swap(&other->ipaddrtx_);
  std::swap(newiptxpresent_, other->newiptxpresent_);
  netmasktx_.Swap(&other->netmasktx_);
  std::swap(newtxmaskpresent_, other->newtxmaskpresent_);
  std::swap(porttx_, other->porttx_);
  std::swap(newporttxpresent_, other->newporttxpresent_);
  gatewaytx_.Swap(&other->gatewaytx_);
  std::swap(newgatewaytxpresent_, other->newgatewaytxpresent_);
  std::swap(currentdate_, other->currentdate_);
  std::swap(mcaststatus_, other->mcaststatus_);
  multicastlistenaddr_.Swap(&other->multicastlistenaddr_);
  std::swap(multicastlistenport_, other->multicastlistenport_);
  std::swap(tcplistenportrx_, other->tcplistenportrx_);
  std::swap(tcpsendporttx_, other->tcpsendporttx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusInfo_descriptor_;
  metadata.reflection = StatusInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusInfo

// optional string SecWallUuid = 1;
void StatusInfo::clear_secwalluuid() {
  secwalluuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::secwalluuid() const {
  // @@protoc_insertion_point(field_get:StatusInfo.SecWallUuid)
  return secwalluuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_secwalluuid(const ::std::string& value) {
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.SecWallUuid)
}
void StatusInfo::set_secwalluuid(const char* value) {
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.SecWallUuid)
}
void StatusInfo::set_secwalluuid(const char* value, size_t size) {
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.SecWallUuid)
}
::std::string* StatusInfo::mutable_secwalluuid() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.SecWallUuid)
  return secwalluuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_secwalluuid() {
  // @@protoc_insertion_point(field_release:StatusInfo.SecWallUuid)
  
  return secwalluuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_secwalluuid(::std::string* secwalluuid) {
  if (secwalluuid != NULL) {
    
  } else {
    
  }
  secwalluuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secwalluuid);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.SecWallUuid)
}

// optional string SecWallName = 2;
void StatusInfo::clear_secwallname() {
  secwallname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::secwallname() const {
  // @@protoc_insertion_point(field_get:StatusInfo.SecWallName)
  return secwallname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_secwallname(const ::std::string& value) {
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.SecWallName)
}
void StatusInfo::set_secwallname(const char* value) {
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.SecWallName)
}
void StatusInfo::set_secwallname(const char* value, size_t size) {
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.SecWallName)
}
::std::string* StatusInfo::mutable_secwallname() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.SecWallName)
  return secwallname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_secwallname() {
  // @@protoc_insertion_point(field_release:StatusInfo.SecWallName)
  
  return secwallname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_secwallname(::std::string* secwallname) {
  if (secwallname != NULL) {
    
  } else {
    
  }
  secwallname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secwallname);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.SecWallName)
}

// optional bool NewSecWallNamePresent = 3;
void StatusInfo::clear_newsecwallnamepresent() {
  newsecwallnamepresent_ = false;
}
bool StatusInfo::newsecwallnamepresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewSecWallNamePresent)
  return newsecwallnamepresent_;
}
void StatusInfo::set_newsecwallnamepresent(bool value) {
  
  newsecwallnamepresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewSecWallNamePresent)
}

// optional string IpAddrRx = 4;
void StatusInfo::clear_ipaddrrx() {
  ipaddrrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::ipaddrrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.IpAddrRx)
  return ipaddrrx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_ipaddrrx(const ::std::string& value) {
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.IpAddrRx)
}
void StatusInfo::set_ipaddrrx(const char* value) {
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.IpAddrRx)
}
void StatusInfo::set_ipaddrrx(const char* value, size_t size) {
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.IpAddrRx)
}
::std::string* StatusInfo::mutable_ipaddrrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.IpAddrRx)
  return ipaddrrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_ipaddrrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.IpAddrRx)
  
  return ipaddrrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_ipaddrrx(::std::string* ipaddrrx) {
  if (ipaddrrx != NULL) {
    
  } else {
    
  }
  ipaddrrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddrrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.IpAddrRx)
}

// optional bool NewIpRxPresent = 5;
void StatusInfo::clear_newiprxpresent() {
  newiprxpresent_ = false;
}
bool StatusInfo::newiprxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewIpRxPresent)
  return newiprxpresent_;
}
void StatusInfo::set_newiprxpresent(bool value) {
  
  newiprxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewIpRxPresent)
}

// optional string NetMaskRx = 6;
void StatusInfo::clear_netmaskrx() {
  netmaskrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::netmaskrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NetMaskRx)
  return netmaskrx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_netmaskrx(const ::std::string& value) {
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.NetMaskRx)
}
void StatusInfo::set_netmaskrx(const char* value) {
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.NetMaskRx)
}
void StatusInfo::set_netmaskrx(const char* value, size_t size) {
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.NetMaskRx)
}
::std::string* StatusInfo::mutable_netmaskrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.NetMaskRx)
  return netmaskrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_netmaskrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.NetMaskRx)
  
  return netmaskrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_netmaskrx(::std::string* netmaskrx) {
  if (netmaskrx != NULL) {
    
  } else {
    
  }
  netmaskrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmaskrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.NetMaskRx)
}

// optional bool NewRxMaskPresent = 7;
void StatusInfo::clear_newrxmaskpresent() {
  newrxmaskpresent_ = false;
}
bool StatusInfo::newrxmaskpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewRxMaskPresent)
  return newrxmaskpresent_;
}
void StatusInfo::set_newrxmaskpresent(bool value) {
  
  newrxmaskpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewRxMaskPresent)
}

// optional int32 PortRx = 8;
void StatusInfo::clear_portrx() {
  portrx_ = 0;
}
::google::protobuf::int32 StatusInfo::portrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.PortRx)
  return portrx_;
}
void StatusInfo::set_portrx(::google::protobuf::int32 value) {
  
  portrx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.PortRx)
}

// optional bool NewPortRxPresent = 9;
void StatusInfo::clear_newportrxpresent() {
  newportrxpresent_ = false;
}
bool StatusInfo::newportrxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewPortRxPresent)
  return newportrxpresent_;
}
void StatusInfo::set_newportrxpresent(bool value) {
  
  newportrxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewPortRxPresent)
}

// optional string GatewayRx = 10;
void StatusInfo::clear_gatewayrx() {
  gatewayrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::gatewayrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.GatewayRx)
  return gatewayrx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_gatewayrx(const ::std::string& value) {
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.GatewayRx)
}
void StatusInfo::set_gatewayrx(const char* value) {
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.GatewayRx)
}
void StatusInfo::set_gatewayrx(const char* value, size_t size) {
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.GatewayRx)
}
::std::string* StatusInfo::mutable_gatewayrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.GatewayRx)
  return gatewayrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_gatewayrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.GatewayRx)
  
  return gatewayrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_gatewayrx(::std::string* gatewayrx) {
  if (gatewayrx != NULL) {
    
  } else {
    
  }
  gatewayrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.GatewayRx)
}

// optional bool NewGatewayRxPresent = 11;
void StatusInfo::clear_newgatewayrxpresent() {
  newgatewayrxpresent_ = false;
}
bool StatusInfo::newgatewayrxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewGatewayRxPresent)
  return newgatewayrxpresent_;
}
void StatusInfo::set_newgatewayrxpresent(bool value) {
  
  newgatewayrxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewGatewayRxPresent)
}

// optional string IpAddrTx = 12;
void StatusInfo::clear_ipaddrtx() {
  ipaddrtx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::ipaddrtx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.IpAddrTx)
  return ipaddrtx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_ipaddrtx(const ::std::string& value) {
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.IpAddrTx)
}
void StatusInfo::set_ipaddrtx(const char* value) {
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.IpAddrTx)
}
void StatusInfo::set_ipaddrtx(const char* value, size_t size) {
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.IpAddrTx)
}
::std::string* StatusInfo::mutable_ipaddrtx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.IpAddrTx)
  return ipaddrtx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_ipaddrtx() {
  // @@protoc_insertion_point(field_release:StatusInfo.IpAddrTx)
  
  return ipaddrtx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_ipaddrtx(::std::string* ipaddrtx) {
  if (ipaddrtx != NULL) {
    
  } else {
    
  }
  ipaddrtx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddrtx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.IpAddrTx)
}

// optional bool NewIpTxPresent = 13;
void StatusInfo::clear_newiptxpresent() {
  newiptxpresent_ = false;
}
bool StatusInfo::newiptxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewIpTxPresent)
  return newiptxpresent_;
}
void StatusInfo::set_newiptxpresent(bool value) {
  
  newiptxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewIpTxPresent)
}

// optional string NetMaskTx = 14;
void StatusInfo::clear_netmasktx() {
  netmasktx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::netmasktx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NetMaskTx)
  return netmasktx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_netmasktx(const ::std::string& value) {
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.NetMaskTx)
}
void StatusInfo::set_netmasktx(const char* value) {
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.NetMaskTx)
}
void StatusInfo::set_netmasktx(const char* value, size_t size) {
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.NetMaskTx)
}
::std::string* StatusInfo::mutable_netmasktx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.NetMaskTx)
  return netmasktx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_netmasktx() {
  // @@protoc_insertion_point(field_release:StatusInfo.NetMaskTx)
  
  return netmasktx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_netmasktx(::std::string* netmasktx) {
  if (netmasktx != NULL) {
    
  } else {
    
  }
  netmasktx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmasktx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.NetMaskTx)
}

// optional bool NewTxMaskPresent = 15;
void StatusInfo::clear_newtxmaskpresent() {
  newtxmaskpresent_ = false;
}
bool StatusInfo::newtxmaskpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewTxMaskPresent)
  return newtxmaskpresent_;
}
void StatusInfo::set_newtxmaskpresent(bool value) {
  
  newtxmaskpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewTxMaskPresent)
}

// optional int32 PortTx = 16;
void StatusInfo::clear_porttx() {
  porttx_ = 0;
}
::google::protobuf::int32 StatusInfo::porttx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.PortTx)
  return porttx_;
}
void StatusInfo::set_porttx(::google::protobuf::int32 value) {
  
  porttx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.PortTx)
}

// optional bool NewPortTxPresent = 17;
void StatusInfo::clear_newporttxpresent() {
  newporttxpresent_ = false;
}
bool StatusInfo::newporttxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewPortTxPresent)
  return newporttxpresent_;
}
void StatusInfo::set_newporttxpresent(bool value) {
  
  newporttxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewPortTxPresent)
}

// optional string GatewayTx = 18;
void StatusInfo::clear_gatewaytx() {
  gatewaytx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::gatewaytx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.GatewayTx)
  return gatewaytx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_gatewaytx(const ::std::string& value) {
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.GatewayTx)
}
void StatusInfo::set_gatewaytx(const char* value) {
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.GatewayTx)
}
void StatusInfo::set_gatewaytx(const char* value, size_t size) {
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.GatewayTx)
}
::std::string* StatusInfo::mutable_gatewaytx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.GatewayTx)
  return gatewaytx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_gatewaytx() {
  // @@protoc_insertion_point(field_release:StatusInfo.GatewayTx)
  
  return gatewaytx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_gatewaytx(::std::string* gatewaytx) {
  if (gatewaytx != NULL) {
    
  } else {
    
  }
  gatewaytx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewaytx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.GatewayTx)
}

// optional bool NewGatewayTxPresent = 19;
void StatusInfo::clear_newgatewaytxpresent() {
  newgatewaytxpresent_ = false;
}
bool StatusInfo::newgatewaytxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewGatewayTxPresent)
  return newgatewaytxpresent_;
}
void StatusInfo::set_newgatewaytxpresent(bool value) {
  
  newgatewaytxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewGatewayTxPresent)
}

// optional .BoxDate CurrentDate = 20;
bool StatusInfo::has_currentdate() const {
  return this != internal_default_instance() && currentdate_ != NULL;
}
void StatusInfo::clear_currentdate() {
  if (GetArenaNoVirtual() == NULL && currentdate_ != NULL) delete currentdate_;
  currentdate_ = NULL;
}
const ::BoxDate& StatusInfo::currentdate() const {
  // @@protoc_insertion_point(field_get:StatusInfo.CurrentDate)
  return currentdate_ != NULL ? *currentdate_
                         : *::BoxDate::internal_default_instance();
}
::BoxDate* StatusInfo::mutable_currentdate() {
  
  if (currentdate_ == NULL) {
    currentdate_ = new ::BoxDate;
  }
  // @@protoc_insertion_point(field_mutable:StatusInfo.CurrentDate)
  return currentdate_;
}
::BoxDate* StatusInfo::release_currentdate() {
  // @@protoc_insertion_point(field_release:StatusInfo.CurrentDate)
  
  ::BoxDate* temp = currentdate_;
  currentdate_ = NULL;
  return temp;
}
void StatusInfo::set_allocated_currentdate(::BoxDate* currentdate) {
  delete currentdate_;
  currentdate_ = currentdate;
  if (currentdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.CurrentDate)
}

// optional .PortStatus McastStatus = 21;
bool StatusInfo::has_mcaststatus() const {
  return this != internal_default_instance() && mcaststatus_ != NULL;
}
void StatusInfo::clear_mcaststatus() {
  if (GetArenaNoVirtual() == NULL && mcaststatus_ != NULL) delete mcaststatus_;
  mcaststatus_ = NULL;
}
const ::PortStatus& StatusInfo::mcaststatus() const {
  // @@protoc_insertion_point(field_get:StatusInfo.McastStatus)
  return mcaststatus_ != NULL ? *mcaststatus_
                         : *::PortStatus::internal_default_instance();
}
::PortStatus* StatusInfo::mutable_mcaststatus() {
  
  if (mcaststatus_ == NULL) {
    mcaststatus_ = new ::PortStatus;
  }
  // @@protoc_insertion_point(field_mutable:StatusInfo.McastStatus)
  return mcaststatus_;
}
::PortStatus* StatusInfo::release_mcaststatus() {
  // @@protoc_insertion_point(field_release:StatusInfo.McastStatus)
  
  ::PortStatus* temp = mcaststatus_;
  mcaststatus_ = NULL;
  return temp;
}
void StatusInfo::set_allocated_mcaststatus(::PortStatus* mcaststatus) {
  delete mcaststatus_;
  mcaststatus_ = mcaststatus;
  if (mcaststatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.McastStatus)
}

// optional string MulticastListenAddr = 22;
void StatusInfo::clear_multicastlistenaddr() {
  multicastlistenaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusInfo::multicastlistenaddr() const {
  // @@protoc_insertion_point(field_get:StatusInfo.MulticastListenAddr)
  return multicastlistenaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_multicastlistenaddr(const ::std::string& value) {
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.MulticastListenAddr)
}
void StatusInfo::set_multicastlistenaddr(const char* value) {
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.MulticastListenAddr)
}
void StatusInfo::set_multicastlistenaddr(const char* value, size_t size) {
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.MulticastListenAddr)
}
::std::string* StatusInfo::mutable_multicastlistenaddr() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.MulticastListenAddr)
  return multicastlistenaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusInfo::release_multicastlistenaddr() {
  // @@protoc_insertion_point(field_release:StatusInfo.MulticastListenAddr)
  
  return multicastlistenaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusInfo::set_allocated_multicastlistenaddr(::std::string* multicastlistenaddr) {
  if (multicastlistenaddr != NULL) {
    
  } else {
    
  }
  multicastlistenaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multicastlistenaddr);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.MulticastListenAddr)
}

// optional int32 MulticastListenPort = 23;
void StatusInfo::clear_multicastlistenport() {
  multicastlistenport_ = 0;
}
::google::protobuf::int32 StatusInfo::multicastlistenport() const {
  // @@protoc_insertion_point(field_get:StatusInfo.MulticastListenPort)
  return multicastlistenport_;
}
void StatusInfo::set_multicastlistenport(::google::protobuf::int32 value) {
  
  multicastlistenport_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.MulticastListenPort)
}

// optional int32 TcpListenPortRx = 24;
void StatusInfo::clear_tcplistenportrx() {
  tcplistenportrx_ = 0;
}
::google::protobuf::int32 StatusInfo::tcplistenportrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.TcpListenPortRx)
  return tcplistenportrx_;
}
void StatusInfo::set_tcplistenportrx(::google::protobuf::int32 value) {
  
  tcplistenportrx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.TcpListenPortRx)
}

// optional int32 TcpSendPortTx = 25;
void StatusInfo::clear_tcpsendporttx() {
  tcpsendporttx_ = 0;
}
::google::protobuf::int32 StatusInfo::tcpsendporttx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.TcpSendPortTx)
  return tcpsendporttx_;
}
void StatusInfo::set_tcpsendporttx(::google::protobuf::int32 value) {
  
  tcpsendporttx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.TcpSendPortTx)
}

inline const StatusInfo* StatusInfo::internal_default_instance() {
  return &StatusInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
