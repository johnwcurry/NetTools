// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusMessage.proto

#ifndef PROTOBUF_INCLUDED_StatusMessage_2eproto
#define PROTOBUF_INCLUDED_StatusMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StatusMessage_2eproto 

namespace protobuf_StatusMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StatusMessage_2eproto
class BoxDate;
class BoxDateDefaultTypeInternal;
extern BoxDateDefaultTypeInternal _BoxDate_default_instance_;
class PortStatus;
class PortStatusDefaultTypeInternal;
extern PortStatusDefaultTypeInternal _PortStatus_default_instance_;
class StatusInfo;
class StatusInfoDefaultTypeInternal;
extern StatusInfoDefaultTypeInternal _StatusInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::BoxDate* Arena::CreateMaybeMessage<::BoxDate>(Arena*);
template<> ::PortStatus* Arena::CreateMaybeMessage<::PortStatus>(Arena*);
template<> ::StatusInfo* Arena::CreateMaybeMessage<::StatusInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class BoxDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BoxDate) */ {
 public:
  BoxDate();
  virtual ~BoxDate();

  BoxDate(const BoxDate& from);

  inline BoxDate& operator=(const BoxDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoxDate(BoxDate&& from) noexcept
    : BoxDate() {
    *this = ::std::move(from);
  }

  inline BoxDate& operator=(BoxDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoxDate* internal_default_instance() {
    return reinterpret_cast<const BoxDate*>(
               &_BoxDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BoxDate* other);
  friend void swap(BoxDate& a, BoxDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoxDate* New() const final {
    return CreateMaybeMessage<BoxDate>(NULL);
  }

  BoxDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BoxDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BoxDate& from);
  void MergeFrom(const BoxDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // int32 Month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // int32 Day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // int32 Hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::int32 hour() const;
  void set_hour(::google::protobuf::int32 value);

  // int32 Minute = 5;
  void clear_minute();
  static const int kMinuteFieldNumber = 5;
  ::google::protobuf::int32 minute() const;
  void set_minute(::google::protobuf::int32 value);

  // int32 Second = 6;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  ::google::protobuf::int32 second() const;
  void set_second(::google::protobuf::int32 value);

  // bool NewTimePresent = 7;
  void clear_newtimepresent();
  static const int kNewTimePresentFieldNumber = 7;
  bool newtimepresent() const;
  void set_newtimepresent(bool value);

  // @@protoc_insertion_point(class_scope:BoxDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 minute_;
  ::google::protobuf::int32 second_;
  bool newtimepresent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StatusMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PortStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PortStatus) */ {
 public:
  PortStatus();
  virtual ~PortStatus();

  PortStatus(const PortStatus& from);

  inline PortStatus& operator=(const PortStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PortStatus(PortStatus&& from) noexcept
    : PortStatus() {
    *this = ::std::move(from);
  }

  inline PortStatus& operator=(PortStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PortStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortStatus* internal_default_instance() {
    return reinterpret_cast<const PortStatus*>(
               &_PortStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PortStatus* other);
  friend void swap(PortStatus& a, PortStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PortStatus* New() const final {
    return CreateMaybeMessage<PortStatus>(NULL);
  }

  PortStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PortStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PortStatus& from);
  void MergeFrom(const PortStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BoxDate LastErrTime = 8;
  bool has_lasterrtime() const;
  void clear_lasterrtime();
  static const int kLastErrTimeFieldNumber = 8;
  private:
  const ::BoxDate& _internal_lasterrtime() const;
  public:
  const ::BoxDate& lasterrtime() const;
  ::BoxDate* release_lasterrtime();
  ::BoxDate* mutable_lasterrtime();
  void set_allocated_lasterrtime(::BoxDate* lasterrtime);

  // int32 Sent = 1;
  void clear_sent();
  static const int kSentFieldNumber = 1;
  ::google::protobuf::int32 sent() const;
  void set_sent(::google::protobuf::int32 value);

  // int32 Received = 2;
  void clear_received();
  static const int kReceivedFieldNumber = 2;
  ::google::protobuf::int32 received() const;
  void set_received(::google::protobuf::int32 value);

  // int32 CrcErr = 3;
  void clear_crcerr();
  static const int kCrcErrFieldNumber = 3;
  ::google::protobuf::int32 crcerr() const;
  void set_crcerr(::google::protobuf::int32 value);

  // int32 BadPkt = 4;
  void clear_badpkt();
  static const int kBadPktFieldNumber = 4;
  ::google::protobuf::int32 badpkt() const;
  void set_badpkt(::google::protobuf::int32 value);

  // int32 UuidErr = 5;
  void clear_uuiderr();
  static const int kUuidErrFieldNumber = 5;
  ::google::protobuf::int32 uuiderr() const;
  void set_uuiderr(::google::protobuf::int32 value);

  // int32 UnknownErr = 6;
  void clear_unknownerr();
  static const int kUnknownErrFieldNumber = 6;
  ::google::protobuf::int32 unknownerr() const;
  void set_unknownerr(::google::protobuf::int32 value);

  // int32 UnknownMsg = 7;
  void clear_unknownmsg();
  static const int kUnknownMsgFieldNumber = 7;
  ::google::protobuf::int32 unknownmsg() const;
  void set_unknownmsg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PortStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BoxDate* lasterrtime_;
  ::google::protobuf::int32 sent_;
  ::google::protobuf::int32 received_;
  ::google::protobuf::int32 crcerr_;
  ::google::protobuf::int32 badpkt_;
  ::google::protobuf::int32 uuiderr_;
  ::google::protobuf::int32 unknownerr_;
  ::google::protobuf::int32 unknownmsg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StatusMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StatusInfo) */ {
 public:
  StatusInfo();
  virtual ~StatusInfo();

  StatusInfo(const StatusInfo& from);

  inline StatusInfo& operator=(const StatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusInfo(StatusInfo&& from) noexcept
    : StatusInfo() {
    *this = ::std::move(from);
  }

  inline StatusInfo& operator=(StatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusInfo* internal_default_instance() {
    return reinterpret_cast<const StatusInfo*>(
               &_StatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StatusInfo* other);
  friend void swap(StatusInfo& a, StatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusInfo* New() const final {
    return CreateMaybeMessage<StatusInfo>(NULL);
  }

  StatusInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusInfo& from);
  void MergeFrom(const StatusInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SecWallUuid = 1;
  void clear_secwalluuid();
  static const int kSecWallUuidFieldNumber = 1;
  const ::std::string& secwalluuid() const;
  void set_secwalluuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secwalluuid(::std::string&& value);
  #endif
  void set_secwalluuid(const char* value);
  void set_secwalluuid(const char* value, size_t size);
  ::std::string* mutable_secwalluuid();
  ::std::string* release_secwalluuid();
  void set_allocated_secwalluuid(::std::string* secwalluuid);

  // string SecWallName = 2;
  void clear_secwallname();
  static const int kSecWallNameFieldNumber = 2;
  const ::std::string& secwallname() const;
  void set_secwallname(const ::std::string& value);
  #if LANG_CXX11
  void set_secwallname(::std::string&& value);
  #endif
  void set_secwallname(const char* value);
  void set_secwallname(const char* value, size_t size);
  ::std::string* mutable_secwallname();
  ::std::string* release_secwallname();
  void set_allocated_secwallname(::std::string* secwallname);

  // string IpAddrRx = 4;
  void clear_ipaddrrx();
  static const int kIpAddrRxFieldNumber = 4;
  const ::std::string& ipaddrrx() const;
  void set_ipaddrrx(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddrrx(::std::string&& value);
  #endif
  void set_ipaddrrx(const char* value);
  void set_ipaddrrx(const char* value, size_t size);
  ::std::string* mutable_ipaddrrx();
  ::std::string* release_ipaddrrx();
  void set_allocated_ipaddrrx(::std::string* ipaddrrx);

  // string NetMaskRx = 6;
  void clear_netmaskrx();
  static const int kNetMaskRxFieldNumber = 6;
  const ::std::string& netmaskrx() const;
  void set_netmaskrx(const ::std::string& value);
  #if LANG_CXX11
  void set_netmaskrx(::std::string&& value);
  #endif
  void set_netmaskrx(const char* value);
  void set_netmaskrx(const char* value, size_t size);
  ::std::string* mutable_netmaskrx();
  ::std::string* release_netmaskrx();
  void set_allocated_netmaskrx(::std::string* netmaskrx);

  // string GatewayRx = 10;
  void clear_gatewayrx();
  static const int kGatewayRxFieldNumber = 10;
  const ::std::string& gatewayrx() const;
  void set_gatewayrx(const ::std::string& value);
  #if LANG_CXX11
  void set_gatewayrx(::std::string&& value);
  #endif
  void set_gatewayrx(const char* value);
  void set_gatewayrx(const char* value, size_t size);
  ::std::string* mutable_gatewayrx();
  ::std::string* release_gatewayrx();
  void set_allocated_gatewayrx(::std::string* gatewayrx);

  // string IpAddrTx = 12;
  void clear_ipaddrtx();
  static const int kIpAddrTxFieldNumber = 12;
  const ::std::string& ipaddrtx() const;
  void set_ipaddrtx(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddrtx(::std::string&& value);
  #endif
  void set_ipaddrtx(const char* value);
  void set_ipaddrtx(const char* value, size_t size);
  ::std::string* mutable_ipaddrtx();
  ::std::string* release_ipaddrtx();
  void set_allocated_ipaddrtx(::std::string* ipaddrtx);

  // string NetMaskTx = 14;
  void clear_netmasktx();
  static const int kNetMaskTxFieldNumber = 14;
  const ::std::string& netmasktx() const;
  void set_netmasktx(const ::std::string& value);
  #if LANG_CXX11
  void set_netmasktx(::std::string&& value);
  #endif
  void set_netmasktx(const char* value);
  void set_netmasktx(const char* value, size_t size);
  ::std::string* mutable_netmasktx();
  ::std::string* release_netmasktx();
  void set_allocated_netmasktx(::std::string* netmasktx);

  // string GatewayTx = 18;
  void clear_gatewaytx();
  static const int kGatewayTxFieldNumber = 18;
  const ::std::string& gatewaytx() const;
  void set_gatewaytx(const ::std::string& value);
  #if LANG_CXX11
  void set_gatewaytx(::std::string&& value);
  #endif
  void set_gatewaytx(const char* value);
  void set_gatewaytx(const char* value, size_t size);
  ::std::string* mutable_gatewaytx();
  ::std::string* release_gatewaytx();
  void set_allocated_gatewaytx(::std::string* gatewaytx);

  // string MulticastListenAddr = 22;
  void clear_multicastlistenaddr();
  static const int kMulticastListenAddrFieldNumber = 22;
  const ::std::string& multicastlistenaddr() const;
  void set_multicastlistenaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_multicastlistenaddr(::std::string&& value);
  #endif
  void set_multicastlistenaddr(const char* value);
  void set_multicastlistenaddr(const char* value, size_t size);
  ::std::string* mutable_multicastlistenaddr();
  ::std::string* release_multicastlistenaddr();
  void set_allocated_multicastlistenaddr(::std::string* multicastlistenaddr);

  // .BoxDate CurrentDate = 20;
  bool has_currentdate() const;
  void clear_currentdate();
  static const int kCurrentDateFieldNumber = 20;
  private:
  const ::BoxDate& _internal_currentdate() const;
  public:
  const ::BoxDate& currentdate() const;
  ::BoxDate* release_currentdate();
  ::BoxDate* mutable_currentdate();
  void set_allocated_currentdate(::BoxDate* currentdate);

  // .PortStatus McastStatus = 21;
  bool has_mcaststatus() const;
  void clear_mcaststatus();
  static const int kMcastStatusFieldNumber = 21;
  private:
  const ::PortStatus& _internal_mcaststatus() const;
  public:
  const ::PortStatus& mcaststatus() const;
  ::PortStatus* release_mcaststatus();
  ::PortStatus* mutable_mcaststatus();
  void set_allocated_mcaststatus(::PortStatus* mcaststatus);

  // bool NewSecWallNamePresent = 3;
  void clear_newsecwallnamepresent();
  static const int kNewSecWallNamePresentFieldNumber = 3;
  bool newsecwallnamepresent() const;
  void set_newsecwallnamepresent(bool value);

  // bool NewIpRxPresent = 5;
  void clear_newiprxpresent();
  static const int kNewIpRxPresentFieldNumber = 5;
  bool newiprxpresent() const;
  void set_newiprxpresent(bool value);

  // bool NewRxMaskPresent = 7;
  void clear_newrxmaskpresent();
  static const int kNewRxMaskPresentFieldNumber = 7;
  bool newrxmaskpresent() const;
  void set_newrxmaskpresent(bool value);

  // bool NewPortRxPresent = 9;
  void clear_newportrxpresent();
  static const int kNewPortRxPresentFieldNumber = 9;
  bool newportrxpresent() const;
  void set_newportrxpresent(bool value);

  // int32 PortRx = 8;
  void clear_portrx();
  static const int kPortRxFieldNumber = 8;
  ::google::protobuf::int32 portrx() const;
  void set_portrx(::google::protobuf::int32 value);

  // bool NewGatewayRxPresent = 11;
  void clear_newgatewayrxpresent();
  static const int kNewGatewayRxPresentFieldNumber = 11;
  bool newgatewayrxpresent() const;
  void set_newgatewayrxpresent(bool value);

  // bool NewIpTxPresent = 13;
  void clear_newiptxpresent();
  static const int kNewIpTxPresentFieldNumber = 13;
  bool newiptxpresent() const;
  void set_newiptxpresent(bool value);

  // bool NewTxMaskPresent = 15;
  void clear_newtxmaskpresent();
  static const int kNewTxMaskPresentFieldNumber = 15;
  bool newtxmaskpresent() const;
  void set_newtxmaskpresent(bool value);

  // bool NewPortTxPresent = 17;
  void clear_newporttxpresent();
  static const int kNewPortTxPresentFieldNumber = 17;
  bool newporttxpresent() const;
  void set_newporttxpresent(bool value);

  // int32 PortTx = 16;
  void clear_porttx();
  static const int kPortTxFieldNumber = 16;
  ::google::protobuf::int32 porttx() const;
  void set_porttx(::google::protobuf::int32 value);

  // bool NewGatewayTxPresent = 19;
  void clear_newgatewaytxpresent();
  static const int kNewGatewayTxPresentFieldNumber = 19;
  bool newgatewaytxpresent() const;
  void set_newgatewaytxpresent(bool value);

  // int32 MulticastListenPort = 23;
  void clear_multicastlistenport();
  static const int kMulticastListenPortFieldNumber = 23;
  ::google::protobuf::int32 multicastlistenport() const;
  void set_multicastlistenport(::google::protobuf::int32 value);

  // int32 TcpListenPortRx = 24;
  void clear_tcplistenportrx();
  static const int kTcpListenPortRxFieldNumber = 24;
  ::google::protobuf::int32 tcplistenportrx() const;
  void set_tcplistenportrx(::google::protobuf::int32 value);

  // int32 TcpSendPortTx = 25;
  void clear_tcpsendporttx();
  static const int kTcpSendPortTxFieldNumber = 25;
  ::google::protobuf::int32 tcpsendporttx() const;
  void set_tcpsendporttx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr secwalluuid_;
  ::google::protobuf::internal::ArenaStringPtr secwallname_;
  ::google::protobuf::internal::ArenaStringPtr ipaddrrx_;
  ::google::protobuf::internal::ArenaStringPtr netmaskrx_;
  ::google::protobuf::internal::ArenaStringPtr gatewayrx_;
  ::google::protobuf::internal::ArenaStringPtr ipaddrtx_;
  ::google::protobuf::internal::ArenaStringPtr netmasktx_;
  ::google::protobuf::internal::ArenaStringPtr gatewaytx_;
  ::google::protobuf::internal::ArenaStringPtr multicastlistenaddr_;
  ::BoxDate* currentdate_;
  ::PortStatus* mcaststatus_;
  bool newsecwallnamepresent_;
  bool newiprxpresent_;
  bool newrxmaskpresent_;
  bool newportrxpresent_;
  ::google::protobuf::int32 portrx_;
  bool newgatewayrxpresent_;
  bool newiptxpresent_;
  bool newtxmaskpresent_;
  bool newporttxpresent_;
  ::google::protobuf::int32 porttx_;
  bool newgatewaytxpresent_;
  ::google::protobuf::int32 multicastlistenport_;
  ::google::protobuf::int32 tcplistenportrx_;
  ::google::protobuf::int32 tcpsendporttx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StatusMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxDate

// int32 Year = 1;
inline void BoxDate::clear_year() {
  year_ = 0;
}
inline ::google::protobuf::int32 BoxDate::year() const {
  // @@protoc_insertion_point(field_get:BoxDate.Year)
  return year_;
}
inline void BoxDate::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Year)
}

// int32 Month = 2;
inline void BoxDate::clear_month() {
  month_ = 0;
}
inline ::google::protobuf::int32 BoxDate::month() const {
  // @@protoc_insertion_point(field_get:BoxDate.Month)
  return month_;
}
inline void BoxDate::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Month)
}

// int32 Day = 3;
inline void BoxDate::clear_day() {
  day_ = 0;
}
inline ::google::protobuf::int32 BoxDate::day() const {
  // @@protoc_insertion_point(field_get:BoxDate.Day)
  return day_;
}
inline void BoxDate::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Day)
}

// int32 Hour = 4;
inline void BoxDate::clear_hour() {
  hour_ = 0;
}
inline ::google::protobuf::int32 BoxDate::hour() const {
  // @@protoc_insertion_point(field_get:BoxDate.Hour)
  return hour_;
}
inline void BoxDate::set_hour(::google::protobuf::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Hour)
}

// int32 Minute = 5;
inline void BoxDate::clear_minute() {
  minute_ = 0;
}
inline ::google::protobuf::int32 BoxDate::minute() const {
  // @@protoc_insertion_point(field_get:BoxDate.Minute)
  return minute_;
}
inline void BoxDate::set_minute(::google::protobuf::int32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Minute)
}

// int32 Second = 6;
inline void BoxDate::clear_second() {
  second_ = 0;
}
inline ::google::protobuf::int32 BoxDate::second() const {
  // @@protoc_insertion_point(field_get:BoxDate.Second)
  return second_;
}
inline void BoxDate::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.Second)
}

// bool NewTimePresent = 7;
inline void BoxDate::clear_newtimepresent() {
  newtimepresent_ = false;
}
inline bool BoxDate::newtimepresent() const {
  // @@protoc_insertion_point(field_get:BoxDate.NewTimePresent)
  return newtimepresent_;
}
inline void BoxDate::set_newtimepresent(bool value) {
  
  newtimepresent_ = value;
  // @@protoc_insertion_point(field_set:BoxDate.NewTimePresent)
}

// -------------------------------------------------------------------

// PortStatus

// int32 Sent = 1;
inline void PortStatus::clear_sent() {
  sent_ = 0;
}
inline ::google::protobuf::int32 PortStatus::sent() const {
  // @@protoc_insertion_point(field_get:PortStatus.Sent)
  return sent_;
}
inline void PortStatus::set_sent(::google::protobuf::int32 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.Sent)
}

// int32 Received = 2;
inline void PortStatus::clear_received() {
  received_ = 0;
}
inline ::google::protobuf::int32 PortStatus::received() const {
  // @@protoc_insertion_point(field_get:PortStatus.Received)
  return received_;
}
inline void PortStatus::set_received(::google::protobuf::int32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.Received)
}

// int32 CrcErr = 3;
inline void PortStatus::clear_crcerr() {
  crcerr_ = 0;
}
inline ::google::protobuf::int32 PortStatus::crcerr() const {
  // @@protoc_insertion_point(field_get:PortStatus.CrcErr)
  return crcerr_;
}
inline void PortStatus::set_crcerr(::google::protobuf::int32 value) {
  
  crcerr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.CrcErr)
}

// int32 BadPkt = 4;
inline void PortStatus::clear_badpkt() {
  badpkt_ = 0;
}
inline ::google::protobuf::int32 PortStatus::badpkt() const {
  // @@protoc_insertion_point(field_get:PortStatus.BadPkt)
  return badpkt_;
}
inline void PortStatus::set_badpkt(::google::protobuf::int32 value) {
  
  badpkt_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.BadPkt)
}

// int32 UuidErr = 5;
inline void PortStatus::clear_uuiderr() {
  uuiderr_ = 0;
}
inline ::google::protobuf::int32 PortStatus::uuiderr() const {
  // @@protoc_insertion_point(field_get:PortStatus.UuidErr)
  return uuiderr_;
}
inline void PortStatus::set_uuiderr(::google::protobuf::int32 value) {
  
  uuiderr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UuidErr)
}

// int32 UnknownErr = 6;
inline void PortStatus::clear_unknownerr() {
  unknownerr_ = 0;
}
inline ::google::protobuf::int32 PortStatus::unknownerr() const {
  // @@protoc_insertion_point(field_get:PortStatus.UnknownErr)
  return unknownerr_;
}
inline void PortStatus::set_unknownerr(::google::protobuf::int32 value) {
  
  unknownerr_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UnknownErr)
}

// int32 UnknownMsg = 7;
inline void PortStatus::clear_unknownmsg() {
  unknownmsg_ = 0;
}
inline ::google::protobuf::int32 PortStatus::unknownmsg() const {
  // @@protoc_insertion_point(field_get:PortStatus.UnknownMsg)
  return unknownmsg_;
}
inline void PortStatus::set_unknownmsg(::google::protobuf::int32 value) {
  
  unknownmsg_ = value;
  // @@protoc_insertion_point(field_set:PortStatus.UnknownMsg)
}

// .BoxDate LastErrTime = 8;
inline bool PortStatus::has_lasterrtime() const {
  return this != internal_default_instance() && lasterrtime_ != NULL;
}
inline void PortStatus::clear_lasterrtime() {
  if (GetArenaNoVirtual() == NULL && lasterrtime_ != NULL) {
    delete lasterrtime_;
  }
  lasterrtime_ = NULL;
}
inline const ::BoxDate& PortStatus::_internal_lasterrtime() const {
  return *lasterrtime_;
}
inline const ::BoxDate& PortStatus::lasterrtime() const {
  const ::BoxDate* p = lasterrtime_;
  // @@protoc_insertion_point(field_get:PortStatus.LastErrTime)
  return p != NULL ? *p : *reinterpret_cast<const ::BoxDate*>(
      &::_BoxDate_default_instance_);
}
inline ::BoxDate* PortStatus::release_lasterrtime() {
  // @@protoc_insertion_point(field_release:PortStatus.LastErrTime)
  
  ::BoxDate* temp = lasterrtime_;
  lasterrtime_ = NULL;
  return temp;
}
inline ::BoxDate* PortStatus::mutable_lasterrtime() {
  
  if (lasterrtime_ == NULL) {
    auto* p = CreateMaybeMessage<::BoxDate>(GetArenaNoVirtual());
    lasterrtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PortStatus.LastErrTime)
  return lasterrtime_;
}
inline void PortStatus::set_allocated_lasterrtime(::BoxDate* lasterrtime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lasterrtime_;
  }
  if (lasterrtime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lasterrtime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lasterrtime, submessage_arena);
    }
    
  } else {
    
  }
  lasterrtime_ = lasterrtime;
  // @@protoc_insertion_point(field_set_allocated:PortStatus.LastErrTime)
}

// -------------------------------------------------------------------

// StatusInfo

// string SecWallUuid = 1;
inline void StatusInfo::clear_secwalluuid() {
  secwalluuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::secwalluuid() const {
  // @@protoc_insertion_point(field_get:StatusInfo.SecWallUuid)
  return secwalluuid_.GetNoArena();
}
inline void StatusInfo::set_secwalluuid(const ::std::string& value) {
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.SecWallUuid)
}
#if LANG_CXX11
inline void StatusInfo::set_secwalluuid(::std::string&& value) {
  
  secwalluuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.SecWallUuid)
}
#endif
inline void StatusInfo::set_secwalluuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.SecWallUuid)
}
inline void StatusInfo::set_secwalluuid(const char* value, size_t size) {
  
  secwalluuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.SecWallUuid)
}
inline ::std::string* StatusInfo::mutable_secwalluuid() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.SecWallUuid)
  return secwalluuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_secwalluuid() {
  // @@protoc_insertion_point(field_release:StatusInfo.SecWallUuid)
  
  return secwalluuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_secwalluuid(::std::string* secwalluuid) {
  if (secwalluuid != NULL) {
    
  } else {
    
  }
  secwalluuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secwalluuid);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.SecWallUuid)
}

// string SecWallName = 2;
inline void StatusInfo::clear_secwallname() {
  secwallname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::secwallname() const {
  // @@protoc_insertion_point(field_get:StatusInfo.SecWallName)
  return secwallname_.GetNoArena();
}
inline void StatusInfo::set_secwallname(const ::std::string& value) {
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.SecWallName)
}
#if LANG_CXX11
inline void StatusInfo::set_secwallname(::std::string&& value) {
  
  secwallname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.SecWallName)
}
#endif
inline void StatusInfo::set_secwallname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.SecWallName)
}
inline void StatusInfo::set_secwallname(const char* value, size_t size) {
  
  secwallname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.SecWallName)
}
inline ::std::string* StatusInfo::mutable_secwallname() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.SecWallName)
  return secwallname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_secwallname() {
  // @@protoc_insertion_point(field_release:StatusInfo.SecWallName)
  
  return secwallname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_secwallname(::std::string* secwallname) {
  if (secwallname != NULL) {
    
  } else {
    
  }
  secwallname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secwallname);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.SecWallName)
}

// bool NewSecWallNamePresent = 3;
inline void StatusInfo::clear_newsecwallnamepresent() {
  newsecwallnamepresent_ = false;
}
inline bool StatusInfo::newsecwallnamepresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewSecWallNamePresent)
  return newsecwallnamepresent_;
}
inline void StatusInfo::set_newsecwallnamepresent(bool value) {
  
  newsecwallnamepresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewSecWallNamePresent)
}

// string IpAddrRx = 4;
inline void StatusInfo::clear_ipaddrrx() {
  ipaddrrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::ipaddrrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.IpAddrRx)
  return ipaddrrx_.GetNoArena();
}
inline void StatusInfo::set_ipaddrrx(const ::std::string& value) {
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.IpAddrRx)
}
#if LANG_CXX11
inline void StatusInfo::set_ipaddrrx(::std::string&& value) {
  
  ipaddrrx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.IpAddrRx)
}
#endif
inline void StatusInfo::set_ipaddrrx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.IpAddrRx)
}
inline void StatusInfo::set_ipaddrrx(const char* value, size_t size) {
  
  ipaddrrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.IpAddrRx)
}
inline ::std::string* StatusInfo::mutable_ipaddrrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.IpAddrRx)
  return ipaddrrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_ipaddrrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.IpAddrRx)
  
  return ipaddrrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_ipaddrrx(::std::string* ipaddrrx) {
  if (ipaddrrx != NULL) {
    
  } else {
    
  }
  ipaddrrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddrrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.IpAddrRx)
}

// bool NewIpRxPresent = 5;
inline void StatusInfo::clear_newiprxpresent() {
  newiprxpresent_ = false;
}
inline bool StatusInfo::newiprxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewIpRxPresent)
  return newiprxpresent_;
}
inline void StatusInfo::set_newiprxpresent(bool value) {
  
  newiprxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewIpRxPresent)
}

// string NetMaskRx = 6;
inline void StatusInfo::clear_netmaskrx() {
  netmaskrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::netmaskrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NetMaskRx)
  return netmaskrx_.GetNoArena();
}
inline void StatusInfo::set_netmaskrx(const ::std::string& value) {
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.NetMaskRx)
}
#if LANG_CXX11
inline void StatusInfo::set_netmaskrx(::std::string&& value) {
  
  netmaskrx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.NetMaskRx)
}
#endif
inline void StatusInfo::set_netmaskrx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.NetMaskRx)
}
inline void StatusInfo::set_netmaskrx(const char* value, size_t size) {
  
  netmaskrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.NetMaskRx)
}
inline ::std::string* StatusInfo::mutable_netmaskrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.NetMaskRx)
  return netmaskrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_netmaskrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.NetMaskRx)
  
  return netmaskrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_netmaskrx(::std::string* netmaskrx) {
  if (netmaskrx != NULL) {
    
  } else {
    
  }
  netmaskrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmaskrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.NetMaskRx)
}

// bool NewRxMaskPresent = 7;
inline void StatusInfo::clear_newrxmaskpresent() {
  newrxmaskpresent_ = false;
}
inline bool StatusInfo::newrxmaskpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewRxMaskPresent)
  return newrxmaskpresent_;
}
inline void StatusInfo::set_newrxmaskpresent(bool value) {
  
  newrxmaskpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewRxMaskPresent)
}

// int32 PortRx = 8;
inline void StatusInfo::clear_portrx() {
  portrx_ = 0;
}
inline ::google::protobuf::int32 StatusInfo::portrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.PortRx)
  return portrx_;
}
inline void StatusInfo::set_portrx(::google::protobuf::int32 value) {
  
  portrx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.PortRx)
}

// bool NewPortRxPresent = 9;
inline void StatusInfo::clear_newportrxpresent() {
  newportrxpresent_ = false;
}
inline bool StatusInfo::newportrxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewPortRxPresent)
  return newportrxpresent_;
}
inline void StatusInfo::set_newportrxpresent(bool value) {
  
  newportrxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewPortRxPresent)
}

// string GatewayRx = 10;
inline void StatusInfo::clear_gatewayrx() {
  gatewayrx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::gatewayrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.GatewayRx)
  return gatewayrx_.GetNoArena();
}
inline void StatusInfo::set_gatewayrx(const ::std::string& value) {
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.GatewayRx)
}
#if LANG_CXX11
inline void StatusInfo::set_gatewayrx(::std::string&& value) {
  
  gatewayrx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.GatewayRx)
}
#endif
inline void StatusInfo::set_gatewayrx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.GatewayRx)
}
inline void StatusInfo::set_gatewayrx(const char* value, size_t size) {
  
  gatewayrx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.GatewayRx)
}
inline ::std::string* StatusInfo::mutable_gatewayrx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.GatewayRx)
  return gatewayrx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_gatewayrx() {
  // @@protoc_insertion_point(field_release:StatusInfo.GatewayRx)
  
  return gatewayrx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_gatewayrx(::std::string* gatewayrx) {
  if (gatewayrx != NULL) {
    
  } else {
    
  }
  gatewayrx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayrx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.GatewayRx)
}

// bool NewGatewayRxPresent = 11;
inline void StatusInfo::clear_newgatewayrxpresent() {
  newgatewayrxpresent_ = false;
}
inline bool StatusInfo::newgatewayrxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewGatewayRxPresent)
  return newgatewayrxpresent_;
}
inline void StatusInfo::set_newgatewayrxpresent(bool value) {
  
  newgatewayrxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewGatewayRxPresent)
}

// string IpAddrTx = 12;
inline void StatusInfo::clear_ipaddrtx() {
  ipaddrtx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::ipaddrtx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.IpAddrTx)
  return ipaddrtx_.GetNoArena();
}
inline void StatusInfo::set_ipaddrtx(const ::std::string& value) {
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.IpAddrTx)
}
#if LANG_CXX11
inline void StatusInfo::set_ipaddrtx(::std::string&& value) {
  
  ipaddrtx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.IpAddrTx)
}
#endif
inline void StatusInfo::set_ipaddrtx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.IpAddrTx)
}
inline void StatusInfo::set_ipaddrtx(const char* value, size_t size) {
  
  ipaddrtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.IpAddrTx)
}
inline ::std::string* StatusInfo::mutable_ipaddrtx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.IpAddrTx)
  return ipaddrtx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_ipaddrtx() {
  // @@protoc_insertion_point(field_release:StatusInfo.IpAddrTx)
  
  return ipaddrtx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_ipaddrtx(::std::string* ipaddrtx) {
  if (ipaddrtx != NULL) {
    
  } else {
    
  }
  ipaddrtx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddrtx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.IpAddrTx)
}

// bool NewIpTxPresent = 13;
inline void StatusInfo::clear_newiptxpresent() {
  newiptxpresent_ = false;
}
inline bool StatusInfo::newiptxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewIpTxPresent)
  return newiptxpresent_;
}
inline void StatusInfo::set_newiptxpresent(bool value) {
  
  newiptxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewIpTxPresent)
}

// string NetMaskTx = 14;
inline void StatusInfo::clear_netmasktx() {
  netmasktx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::netmasktx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NetMaskTx)
  return netmasktx_.GetNoArena();
}
inline void StatusInfo::set_netmasktx(const ::std::string& value) {
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.NetMaskTx)
}
#if LANG_CXX11
inline void StatusInfo::set_netmasktx(::std::string&& value) {
  
  netmasktx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.NetMaskTx)
}
#endif
inline void StatusInfo::set_netmasktx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.NetMaskTx)
}
inline void StatusInfo::set_netmasktx(const char* value, size_t size) {
  
  netmasktx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.NetMaskTx)
}
inline ::std::string* StatusInfo::mutable_netmasktx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.NetMaskTx)
  return netmasktx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_netmasktx() {
  // @@protoc_insertion_point(field_release:StatusInfo.NetMaskTx)
  
  return netmasktx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_netmasktx(::std::string* netmasktx) {
  if (netmasktx != NULL) {
    
  } else {
    
  }
  netmasktx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmasktx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.NetMaskTx)
}

// bool NewTxMaskPresent = 15;
inline void StatusInfo::clear_newtxmaskpresent() {
  newtxmaskpresent_ = false;
}
inline bool StatusInfo::newtxmaskpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewTxMaskPresent)
  return newtxmaskpresent_;
}
inline void StatusInfo::set_newtxmaskpresent(bool value) {
  
  newtxmaskpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewTxMaskPresent)
}

// int32 PortTx = 16;
inline void StatusInfo::clear_porttx() {
  porttx_ = 0;
}
inline ::google::protobuf::int32 StatusInfo::porttx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.PortTx)
  return porttx_;
}
inline void StatusInfo::set_porttx(::google::protobuf::int32 value) {
  
  porttx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.PortTx)
}

// bool NewPortTxPresent = 17;
inline void StatusInfo::clear_newporttxpresent() {
  newporttxpresent_ = false;
}
inline bool StatusInfo::newporttxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewPortTxPresent)
  return newporttxpresent_;
}
inline void StatusInfo::set_newporttxpresent(bool value) {
  
  newporttxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewPortTxPresent)
}

// string GatewayTx = 18;
inline void StatusInfo::clear_gatewaytx() {
  gatewaytx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::gatewaytx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.GatewayTx)
  return gatewaytx_.GetNoArena();
}
inline void StatusInfo::set_gatewaytx(const ::std::string& value) {
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.GatewayTx)
}
#if LANG_CXX11
inline void StatusInfo::set_gatewaytx(::std::string&& value) {
  
  gatewaytx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.GatewayTx)
}
#endif
inline void StatusInfo::set_gatewaytx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.GatewayTx)
}
inline void StatusInfo::set_gatewaytx(const char* value, size_t size) {
  
  gatewaytx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.GatewayTx)
}
inline ::std::string* StatusInfo::mutable_gatewaytx() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.GatewayTx)
  return gatewaytx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_gatewaytx() {
  // @@protoc_insertion_point(field_release:StatusInfo.GatewayTx)
  
  return gatewaytx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_gatewaytx(::std::string* gatewaytx) {
  if (gatewaytx != NULL) {
    
  } else {
    
  }
  gatewaytx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewaytx);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.GatewayTx)
}

// bool NewGatewayTxPresent = 19;
inline void StatusInfo::clear_newgatewaytxpresent() {
  newgatewaytxpresent_ = false;
}
inline bool StatusInfo::newgatewaytxpresent() const {
  // @@protoc_insertion_point(field_get:StatusInfo.NewGatewayTxPresent)
  return newgatewaytxpresent_;
}
inline void StatusInfo::set_newgatewaytxpresent(bool value) {
  
  newgatewaytxpresent_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.NewGatewayTxPresent)
}

// .BoxDate CurrentDate = 20;
inline bool StatusInfo::has_currentdate() const {
  return this != internal_default_instance() && currentdate_ != NULL;
}
inline void StatusInfo::clear_currentdate() {
  if (GetArenaNoVirtual() == NULL && currentdate_ != NULL) {
    delete currentdate_;
  }
  currentdate_ = NULL;
}
inline const ::BoxDate& StatusInfo::_internal_currentdate() const {
  return *currentdate_;
}
inline const ::BoxDate& StatusInfo::currentdate() const {
  const ::BoxDate* p = currentdate_;
  // @@protoc_insertion_point(field_get:StatusInfo.CurrentDate)
  return p != NULL ? *p : *reinterpret_cast<const ::BoxDate*>(
      &::_BoxDate_default_instance_);
}
inline ::BoxDate* StatusInfo::release_currentdate() {
  // @@protoc_insertion_point(field_release:StatusInfo.CurrentDate)
  
  ::BoxDate* temp = currentdate_;
  currentdate_ = NULL;
  return temp;
}
inline ::BoxDate* StatusInfo::mutable_currentdate() {
  
  if (currentdate_ == NULL) {
    auto* p = CreateMaybeMessage<::BoxDate>(GetArenaNoVirtual());
    currentdate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:StatusInfo.CurrentDate)
  return currentdate_;
}
inline void StatusInfo::set_allocated_currentdate(::BoxDate* currentdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete currentdate_;
  }
  if (currentdate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      currentdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currentdate, submessage_arena);
    }
    
  } else {
    
  }
  currentdate_ = currentdate;
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.CurrentDate)
}

// .PortStatus McastStatus = 21;
inline bool StatusInfo::has_mcaststatus() const {
  return this != internal_default_instance() && mcaststatus_ != NULL;
}
inline void StatusInfo::clear_mcaststatus() {
  if (GetArenaNoVirtual() == NULL && mcaststatus_ != NULL) {
    delete mcaststatus_;
  }
  mcaststatus_ = NULL;
}
inline const ::PortStatus& StatusInfo::_internal_mcaststatus() const {
  return *mcaststatus_;
}
inline const ::PortStatus& StatusInfo::mcaststatus() const {
  const ::PortStatus* p = mcaststatus_;
  // @@protoc_insertion_point(field_get:StatusInfo.McastStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::PortStatus*>(
      &::_PortStatus_default_instance_);
}
inline ::PortStatus* StatusInfo::release_mcaststatus() {
  // @@protoc_insertion_point(field_release:StatusInfo.McastStatus)
  
  ::PortStatus* temp = mcaststatus_;
  mcaststatus_ = NULL;
  return temp;
}
inline ::PortStatus* StatusInfo::mutable_mcaststatus() {
  
  if (mcaststatus_ == NULL) {
    auto* p = CreateMaybeMessage<::PortStatus>(GetArenaNoVirtual());
    mcaststatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:StatusInfo.McastStatus)
  return mcaststatus_;
}
inline void StatusInfo::set_allocated_mcaststatus(::PortStatus* mcaststatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mcaststatus_;
  }
  if (mcaststatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcaststatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcaststatus, submessage_arena);
    }
    
  } else {
    
  }
  mcaststatus_ = mcaststatus;
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.McastStatus)
}

// string MulticastListenAddr = 22;
inline void StatusInfo::clear_multicastlistenaddr() {
  multicastlistenaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusInfo::multicastlistenaddr() const {
  // @@protoc_insertion_point(field_get:StatusInfo.MulticastListenAddr)
  return multicastlistenaddr_.GetNoArena();
}
inline void StatusInfo::set_multicastlistenaddr(const ::std::string& value) {
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusInfo.MulticastListenAddr)
}
#if LANG_CXX11
inline void StatusInfo::set_multicastlistenaddr(::std::string&& value) {
  
  multicastlistenaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StatusInfo.MulticastListenAddr)
}
#endif
inline void StatusInfo::set_multicastlistenaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusInfo.MulticastListenAddr)
}
inline void StatusInfo::set_multicastlistenaddr(const char* value, size_t size) {
  
  multicastlistenaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusInfo.MulticastListenAddr)
}
inline ::std::string* StatusInfo::mutable_multicastlistenaddr() {
  
  // @@protoc_insertion_point(field_mutable:StatusInfo.MulticastListenAddr)
  return multicastlistenaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusInfo::release_multicastlistenaddr() {
  // @@protoc_insertion_point(field_release:StatusInfo.MulticastListenAddr)
  
  return multicastlistenaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfo::set_allocated_multicastlistenaddr(::std::string* multicastlistenaddr) {
  if (multicastlistenaddr != NULL) {
    
  } else {
    
  }
  multicastlistenaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multicastlistenaddr);
  // @@protoc_insertion_point(field_set_allocated:StatusInfo.MulticastListenAddr)
}

// int32 MulticastListenPort = 23;
inline void StatusInfo::clear_multicastlistenport() {
  multicastlistenport_ = 0;
}
inline ::google::protobuf::int32 StatusInfo::multicastlistenport() const {
  // @@protoc_insertion_point(field_get:StatusInfo.MulticastListenPort)
  return multicastlistenport_;
}
inline void StatusInfo::set_multicastlistenport(::google::protobuf::int32 value) {
  
  multicastlistenport_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.MulticastListenPort)
}

// int32 TcpListenPortRx = 24;
inline void StatusInfo::clear_tcplistenportrx() {
  tcplistenportrx_ = 0;
}
inline ::google::protobuf::int32 StatusInfo::tcplistenportrx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.TcpListenPortRx)
  return tcplistenportrx_;
}
inline void StatusInfo::set_tcplistenportrx(::google::protobuf::int32 value) {
  
  tcplistenportrx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.TcpListenPortRx)
}

// int32 TcpSendPortTx = 25;
inline void StatusInfo::clear_tcpsendporttx() {
  tcpsendporttx_ = 0;
}
inline ::google::protobuf::int32 StatusInfo::tcpsendporttx() const {
  // @@protoc_insertion_point(field_get:StatusInfo.TcpSendPortTx)
  return tcpsendporttx_;
}
inline void StatusInfo::set_tcpsendporttx(::google::protobuf::int32 value) {
  
  tcpsendporttx_ = value;
  // @@protoc_insertion_point(field_set:StatusInfo.TcpSendPortTx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StatusMessage_2eproto
